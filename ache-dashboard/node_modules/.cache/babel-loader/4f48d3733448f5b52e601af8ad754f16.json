{"ast":null,"code":"/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar assign = require('lodash/assign');\n/* jshint validthis: true */\n\n\nvar is = 'is-',\n    space = ' ',\n    settings = {\n  ns: '',\n  el: '__',\n  mod: '_',\n  modValue: '_',\n  classMap: {}\n};\n/**\n * Simplest mixin helper\n */\n\nfunction extend(target, obj) {\n  return Object.keys(obj).reduce(function (target, key) {\n    var value = obj[key]; // Shallow copy of array\n\n    if (Array.isArray(value)) {\n      value = value.slice();\n    }\n\n    target[key] = value;\n    return target;\n  }, target);\n}\n/**\n * Shallow copy helper\n */\n\n\nfunction copy(obj) {\n  return extend({}, obj);\n}\n/**\n * Converts object with classes to array of strings\n * Example: objectToArray({ color: 'red' }) -> ['', '_color_red']\n *\n * @param {Object} obj { name: 'value' } or { name1: true, name2: false }\n * @param {String} [separator='_'] Separator or prefix\n */\n\n\nfunction objectToArray(obj, separator) {\n  if (separator === undefined) {\n    separator = settings.mod;\n  }\n\n  var modValueSeparator = settings.modValue;\n  return Object.keys(obj).reduce(function (array, key) {\n    var value = obj[key];\n\n    if (!value) {\n      return array;\n    }\n\n    if (value === true) {\n      array.push(separator + key);\n    } else {\n      // Makes block__elem_{modifierKey}_{modifierValue}\n      array.push(separator + key + modValueSeparator + value);\n    }\n\n    return array;\n  }, []);\n}\n/**\n * Resolves real class name from classMap\n * @param {String} name\n * @returns {String}\n */\n\n\nfunction resolveClassName(name) {\n  return settings.classMap[name] || name;\n}\n/**\n * Callable block instance\n */\n\n\nfunction callableInstance() {\n  var args = Array.prototype.slice.call(arguments);\n  var context = copy(this);\n  context = args.reduce(function (context, argv) {\n    if (argv && typeof argv === 'string') {\n      context.name = context.name + settings.el + argv;\n    }\n\n    if (argv && typeof argv === 'object') {\n      context.mods.push(argv);\n    }\n\n    return context;\n  }, context);\n  return factory(context);\n}\n/**\n * Static method toString() for callable instance\n */\n\n\nfunction toString() {\n  // Add namespace\n  var name = settings.ns + this.name,\n      classList = resolveClassName(name); // Add modifiers\n\n  classList = this.mods.reduce(function (classList, modObject) {\n    var modArray = objectToArray(modObject);\n\n    if (modArray.length) {\n      modArray = modArray.map(function (mod) {\n        return resolveClassName(name + mod);\n      });\n      modArray.unshift('');\n      classList += modArray.join(space);\n    }\n\n    return classList;\n  }, classList); // Mix with another classes\n\n  if (this.mixes.length) {\n    classList += space + this.mixes.join(space);\n  } // Add states\n\n\n  var states = this.states;\n  classList = Object.keys(states).reduce(function (classList, state) {\n    return classList += states[state] ? space + is + state : '';\n  }, classList);\n  return classList;\n}\n\nfunction split() {\n  var classNames = toString.bind(this)();\n  return String.prototype.split.apply(classNames, arguments);\n}\n/**\n * Static method mix() for callable instance\n * @param {String|Array|Object} className 'class'; ['one', 'two']; {one: true, two: false}\n */\n\n\nfunction mix(className) {\n  var context = copy(this),\n      classes;\n\n  if (className) {\n    if (typeof className === 'function') {\n      classes = [className.toString()];\n    } else if (Array.isArray(className)) {\n      classes = className;\n    } else if (typeof className === 'object') {\n      classes = [className.toString()];\n    } else if (typeof className === 'string') {\n      classes = [className];\n    } else {\n      classes = objectToArray(className, '');\n    }\n\n    context.mixes = context.mixes.concat(classes);\n  }\n\n  return factory(context);\n}\n/**\n * Adds SMACSS-states: https://smacss.com/book/type-state\n * @param {Object} obj State object\n * @return {[type]} [description]\n */\n\n\nfunction state(obj) {\n  var context = copy(this),\n      states = copy(context.states);\n  extend(states, obj || {});\n  context.states = states;\n  return factory(context);\n}\n/**\n * Generator of block-functions\n * @param {Object} context Immutable context of current block\n * @return {Function}\n */\n\n\nfunction factory(context) {\n  context = extend({\n    name: '',\n    mods: [],\n    mixes: [],\n    states: {}\n  }, context || {}); // Whilst JavaScript can't create callable objects with constructors\n  // var b:any = callableInstance.bind(context);\n\n  var b = {};\n  b.el = callableInstance.bind(context);\n  b.mod = callableInstance.bind(context); // var b:any = {}\n\n  b.toString = toString.bind(context);\n  b.split = split.bind(context);\n  b.mix = mix.bind(context);\n  b.state = state.bind(context);\n  return b;\n}\n/**\n * Entry point\n * @param {String} name Block name\n * @return {Function}\n */\n\n\nfunction block(name) {\n  return factory({\n    name: name\n  });\n}\n\nexports.block = block;\n/**\n * Setup settings\n */\n\nassign(block, {\n  setup: function setup(obj) {\n    extend(settings, obj || {});\n    return block;\n  }\n});","map":{"version":3,"mappings":"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","names":["assign","require","is","space","settings","ns","el","mod","modValue","classMap","extend","target","obj","Object","keys","reduce","key","value","Array","isArray","slice","copy","objectToArray","separator","undefined","modValueSeparator","array","push","resolveClassName","name","callableInstance","args","prototype","call","arguments","context","argv","mods","factory","toString","classList","modObject","modArray","length","map","unshift","join","mixes","states","state","split","classNames","bind","String","apply","mix","className","classes","concat","b","block","exports","setup"],"sources":["C:\\Users\\mnavas\\CODE\\SmartBIC\\ache-multilingual\\ache-dashboard\\node_modules\\searchkit\\src\\core\\react\\block.ts"],"sourcesContent":["/* eslint-disable */\n\nconst assign = require('lodash/assign')\n/* jshint validthis: true */\n\nconst is = 'is-',\n  space = ' ',\n  settings = {\n    ns: '',\n    el: '__',\n    mod: '_',\n    modValue: '_',\n    classMap: {}\n  }\n\n/**\n * Simplest mixin helper\n */\nfunction extend(target, obj) {\n  return Object.keys(obj).reduce(function(target, key) {\n    let value = obj[key]\n\n    // Shallow copy of array\n    if (Array.isArray(value)) {\n      value = value.slice()\n    }\n\n    target[key] = value\n    return target\n  }, target)\n}\n\n/**\n * Shallow copy helper\n */\nfunction copy(obj) {\n  return extend({}, obj)\n}\n\n/**\n * Converts object with classes to array of strings\n * Example: objectToArray({ color: 'red' }) -> ['', '_color_red']\n *\n * @param {Object} obj { name: 'value' } or { name1: true, name2: false }\n * @param {String} [separator='_'] Separator or prefix\n */\nfunction objectToArray(obj, separator?) {\n  if (separator === undefined) {\n    separator = settings.mod\n  }\n\n  const modValueSeparator = settings.modValue\n\n  return Object.keys(obj).reduce(function(array, key) {\n    const value = obj[key]\n\n    if (!value) {\n      return array\n    }\n\n    if (value === true) {\n      array.push(separator + key)\n    } else {\n      // Makes block__elem_{modifierKey}_{modifierValue}\n      array.push(separator + key + modValueSeparator + value)\n    }\n\n    return array\n  }, [])\n}\n\n/**\n * Resolves real class name from classMap\n * @param {String} name\n * @returns {String}\n */\nfunction resolveClassName(name) {\n  return settings.classMap[name] || name\n}\n\n/**\n * Callable block instance\n */\nfunction callableInstance() {\n  const args = Array.prototype.slice.call(arguments)\n  let context = copy(this)\n\n  context = args.reduce(function(context, argv) {\n    if (argv && typeof argv === 'string') {\n      context.name = context.name + settings.el + argv\n    }\n\n    if (argv && typeof argv === 'object') {\n      context.mods.push(argv)\n    }\n\n    return context\n  }, context)\n\n  return factory(context)\n}\n\n/**\n * Static method toString() for callable instance\n */\nfunction toString() {\n  // Add namespace\n  let name = settings.ns + this.name,\n    classList = resolveClassName(name)\n\n  // Add modifiers\n  classList = this.mods.reduce(function(classList, modObject) {\n    let modArray = objectToArray(modObject)\n\n    if (modArray.length) {\n      modArray = modArray.map(function(mod) {\n        return resolveClassName(name + mod)\n      })\n\n      modArray.unshift('')\n      classList += modArray.join(space)\n    }\n\n    return classList\n  }, classList)\n\n  // Mix with another classes\n  if (this.mixes.length) {\n    classList += space + this.mixes.join(space)\n  }\n\n  // Add states\n  const states = this.states\n  classList = Object.keys(states).reduce(function(classList, state) {\n    return (classList += states[state] ? space + is + state : '')\n  }, classList)\n\n  return classList\n}\n\nfunction split() {\n  const classNames = toString.bind(this)()\n  return String.prototype.split.apply(classNames, arguments)\n}\n\n/**\n * Static method mix() for callable instance\n * @param {String|Array|Object} className 'class'; ['one', 'two']; {one: true, two: false}\n */\nfunction mix(className) {\n  let context = copy(this),\n    classes\n\n  if (className) {\n    if (typeof className === 'function') {\n      classes = [className.toString()]\n    } else if (Array.isArray(className)) {\n      classes = className\n    } else if (typeof className === 'object') {\n      classes = [className.toString()]\n    } else if (typeof className === 'string') {\n      classes = [className]\n    } else {\n      classes = objectToArray(className, '')\n    }\n    context.mixes = context.mixes.concat(classes)\n  }\n\n  return factory(context)\n}\n\n/**\n * Adds SMACSS-states: https://smacss.com/book/type-state\n * @param {Object} obj State object\n * @return {[type]} [description]\n */\nfunction state(obj) {\n  const context = copy(this),\n    states = copy(context.states)\n\n  extend(states, obj || {})\n  context.states = states\n\n  return factory(context)\n}\n\n/**\n * Generator of block-functions\n * @param {Object} context Immutable context of current block\n * @return {Function}\n */\nfunction factory(context) {\n  context = extend(\n    {\n      name: '',\n      mods: [],\n      mixes: [],\n      states: {}\n    },\n    context || {}\n  )\n\n  // Whilst JavaScript can't create callable objects with constructors\n  // var b:any = callableInstance.bind(context);\n  const b: any = {}\n  b.el = callableInstance.bind(context)\n  b.mod = callableInstance.bind(context)\n  // var b:any = {}\n  b.toString = toString.bind(context)\n  b.split = split.bind(context)\n  b.mix = mix.bind(context)\n  b.state = state.bind(context)\n\n  return b\n}\n\n/**\n * Entry point\n * @param {String} name Block name\n * @return {Function}\n */\nexport function block(name?) {\n  return factory({ name: name })\n}\n/**\n * Setup settings\n */\nassign(block, {\n  setup: function(obj) {\n    extend(settings, obj || {})\n    return block\n  }\n})\n"]},"metadata":{},"sourceType":"script"}