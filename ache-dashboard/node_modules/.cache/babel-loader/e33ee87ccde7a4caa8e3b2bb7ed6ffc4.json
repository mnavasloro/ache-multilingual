{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar State_1 = require(\"./State\");\n\nvar isArray = require('lodash/isArray');\n\nvar take = require('lodash/take');\n\nvar size = require('lodash/size');\n\nvar without = require('lodash/without');\n\nvar indexOf = require('lodash/indexOf');\n\nvar update = require('immutability-helper');\n\nvar LevelState =\n/** @class */\nfunction (_super) {\n  __extends(LevelState, _super);\n\n  function LevelState() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  LevelState.prototype.getValue = function () {\n    return this.value || [];\n  };\n\n  LevelState.prototype.add = function (level, val) {\n    var _a, _b;\n\n    var ob = this.getValue();\n\n    if (!isArray(ob[level])) {\n      ob = update(ob, (_a = {}, _a[level] = {\n        $set: []\n      }, _a));\n    }\n\n    ob = update(ob, (_b = {}, _b[level] = {\n      $push: [val]\n    }, _b));\n    return this.create(ob);\n  };\n\n  LevelState.prototype.contains = function (level, val) {\n    return indexOf(this.getValue()[level], val) !== -1;\n  };\n\n  LevelState.prototype.clear = function (level) {\n    if (level === void 0) {\n      level = 0;\n    }\n\n    return this.create(take(this.getValue(), level));\n  };\n\n  LevelState.prototype.remove = function (level, val) {\n    var _a;\n\n    return this.create(update(this.getValue(), (_a = {}, _a[level] = {\n      $set: without(this.getValue()[level], val)\n    }, _a)));\n  };\n\n  LevelState.prototype.toggle = function (level, val) {\n    if (this.contains(level, val)) {\n      return this.remove(level, val);\n    }\n\n    return this.add(level, val);\n  };\n\n  LevelState.prototype.getLevel = function (level) {\n    return this.getValue()[level] || [];\n  };\n\n  LevelState.prototype.levelHasFilters = function (level) {\n    return this.getLevel(level).length > 0;\n  };\n\n  LevelState.prototype.getLeafLevel = function () {\n    return size(this.value) - 1;\n  };\n\n  LevelState.prototype.isLeafLevel = function (level) {\n    return level === this.getLeafLevel();\n  };\n\n  LevelState.prototype.toggleLevel = function (level, key) {\n    if (this.contains(level, key)) {\n      if (this.isLeafLevel(level)) {\n        return this.clear(level);\n      }\n\n      return this.clear(level + 1);\n    }\n\n    return this.clear(level).add(level, key);\n  };\n\n  return LevelState;\n}(State_1.State);\n\nexports.LevelState = LevelState;","map":{"version":3,"mappings":"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","names":["isArray","require","take","size","without","indexOf","update","__extends","LevelState","value","level","val","ob","getValue","_a","$set","_b","$push","create","contains","remove","add","getLevel","length","getLeafLevel","key","isLeafLevel","clear","State_1","exports"],"sources":["C:\\Users\\mnavas\\CODE\\SmartBIC\\ache-multilingual\\ache-dashboard\\node_modules\\searchkit\\src\\core\\state\\LevelState.ts"],"sourcesContent":["import { State } from './State'\nconst isArray = require('lodash/isArray')\nconst take = require('lodash/take')\nconst size = require('lodash/size')\nconst without = require('lodash/without')\nconst indexOf = require('lodash/indexOf')\nconst update = require('immutability-helper')\n\nexport class LevelState extends State<Array<any>> {\n  value: Array<any>\n\n  getValue() {\n    return this.value || []\n  }\n\n  add(level: number, val) {\n    let ob = this.getValue()\n    if (!isArray(ob[level])) {\n      ob = update(ob, {\n        [level]: { $set: [] }\n      })\n    }\n    ob = update(ob, {\n      [level]: { $push: [val] }\n    })\n    return this.create(ob)\n  }\n\n  contains(level: number, val) {\n    return indexOf(this.getValue()[level], val) !== -1\n  }\n\n  clear(level = 0) {\n    return this.create(take(this.getValue(), level))\n  }\n\n  remove(level: number, val) {\n    return this.create(\n      update(this.getValue(), {\n        [level]: { $set: without(this.getValue()[level], val) }\n      })\n    )\n  }\n\n  toggle(level: number, val) {\n    if (this.contains(level, val)) {\n      return this.remove(level, val)\n    }\n    return this.add(level, val)\n  }\n\n  getLevel(level: number): Array<string> {\n    return this.getValue()[level] || []\n  }\n\n  levelHasFilters(level: number): boolean {\n    return this.getLevel(level).length > 0\n  }\n\n  getLeafLevel() {\n    return size(this.value) - 1\n  }\n\n  isLeafLevel(level: number): boolean {\n    return level === this.getLeafLevel()\n  }\n\n  toggleLevel(level, key): LevelState {\n    if (this.contains(level, key)) {\n      if (this.isLeafLevel(level)) {\n        return this.clear(level)\n      }\n      return this.clear(level + 1)\n    }\n    return this.clear(level).add(level, key)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}