{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar defaults = require('lodash/defaults');\n\nvar PaginationHelper =\n/** @class */\nfunction () {\n  function PaginationHelper(_a) {\n    var currentPage = _a.currentPage,\n        totalPages = _a.totalPages,\n        translate = _a.translate;\n    this.currentPage = currentPage;\n    this.totalPages = totalPages;\n    this.translate = translate;\n    this.pages = [];\n    this.lastPage = 0; // Last added page number\n  }\n\n  PaginationHelper.prototype.push = function (item) {\n    this.pages.push(item);\n  };\n\n  PaginationHelper.prototype.previous = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.push(defaults({\n      key: 'previous',\n      label: this.translate('pagination.previous'),\n      page: this.currentPage > 1 ? this.currentPage - 1 : undefined,\n      disabled: this.currentPage === 1\n    }, options));\n  };\n\n  PaginationHelper.prototype.next = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.push(defaults({\n      key: 'next',\n      label: this.translate('pagination.next'),\n      page: this.currentPage < this.totalPages - 1 ? this.currentPage + 1 : undefined,\n      disabled: this.currentPage === this.totalPages\n    }, options));\n  };\n\n  PaginationHelper.prototype.page = function (pageNumber, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (pageNumber > 0 && pageNumber <= this.totalPages) {\n      this.push(defaults({\n        key: pageNumber,\n        label: '' + pageNumber,\n        page: pageNumber,\n        active: pageNumber == this.currentPage\n      }, options));\n    }\n  };\n\n  PaginationHelper.prototype.range = function (minPage, maxPage, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var min = Math.max(1, minPage);\n    var max = Math.min(maxPage, this.totalPages);\n\n    for (var i = min; i <= max; i++) {\n      this.page(i, options);\n    }\n  };\n\n  PaginationHelper.prototype.ellipsis = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.push(defaults({\n      key: 'ellipsis-' + this.pages.length,\n      label: '...',\n      disabled: true\n    }, options));\n  };\n\n  return PaginationHelper;\n}();\n\nexports.PaginationHelper = PaginationHelper;\nexports.Paginator = {\n  build: function build(_a) {\n    var _b = _a.showNumbers,\n        showNumbers = _b === void 0 ? true : _b,\n        _c = _a.showPrevious,\n        showPrevious = _c === void 0 ? true : _c,\n        _d = _a.showNext,\n        showNext = _d === void 0 ? true : _d,\n        _e = _a.showEllipsis,\n        showEllipsis = _e === void 0 ? true : _e,\n        _f = _a.showFirst,\n        showFirst = _f === void 0 ? true : _f,\n        _g = _a.showLast,\n        showLast = _g === void 0 ? false : _g;\n    return function (currentPage, totalPages, translate, pageScope) {\n      if (pageScope === void 0) {\n        pageScope = 3;\n      }\n\n      var builder = new PaginationHelper({\n        currentPage: currentPage,\n        totalPages: totalPages,\n        translate: translate\n      });\n      if (showPrevious) builder.previous();\n\n      if (showNumbers) {\n        if (showFirst && currentPage > pageScope + 1) builder.page(1);\n        if (showEllipsis && currentPage > pageScope + 2) builder.ellipsis();\n        builder.range(currentPage - pageScope, currentPage - 1);\n        builder.page(currentPage, {\n          active: true\n        });\n        builder.range(currentPage + 1, currentPage + pageScope);\n        var lastEllipsisLimit = showLast ? totalPages - pageScope - 1 : totalPages - pageScope;\n        if (showEllipsis && currentPage < lastEllipsisLimit) builder.ellipsis();\n        if (showLast && currentPage < totalPages - pageScope) builder.page(totalPages);\n      }\n\n      if (showNext) builder.next();\n      return builder.pages;\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["defaults","require","_a","currentPage","totalPages","translate","pages","lastPage","PaginationHelper","item","push","options","key","label","page","undefined","disabled","pageNumber","active","minPage","maxPage","min","Math","max","i","length","exports","build","_b","showNumbers","_c","showPrevious","_d","showNext","_e","showEllipsis","_f","showFirst","_g","showLast","pageScope","builder","previous","ellipsis","range","lastEllipsisLimit","next"],"sources":["C:\\Users\\mnavas\\CODE\\SmartBIC\\ache-multilingual\\ache-dashboard\\node_modules\\searchkit\\src\\components\\search\\pagination\\src\\PaginationUtils.ts"],"sourcesContent":["const defaults = require('lodash/defaults')\n\nexport class PaginationHelper {\n  currentPage: number\n  totalPages: number\n  translate: Function\n  pages: Array<any>\n  lastPage: number\n\n  constructor({ currentPage, totalPages, translate }) {\n    this.currentPage = currentPage\n    this.totalPages = totalPages\n    this.translate = translate\n    this.pages = []\n    this.lastPage = 0 // Last added page number\n  }\n\n  push(item) {\n    this.pages.push(item)\n  }\n\n  previous(options = {}) {\n    this.push(\n      defaults(\n        {\n          key: 'previous',\n          label: this.translate('pagination.previous'),\n          page: this.currentPage > 1 ? this.currentPage - 1 : undefined,\n          disabled: this.currentPage === 1\n        },\n        options\n      )\n    )\n  }\n\n  next(options = {}) {\n    this.push(\n      defaults(\n        {\n          key: 'next',\n          label: this.translate('pagination.next'),\n          page: this.currentPage < this.totalPages - 1 ? this.currentPage + 1 : undefined,\n          disabled: this.currentPage === this.totalPages\n        },\n        options\n      )\n    )\n  }\n\n  page(pageNumber, options = {}) {\n    if (pageNumber > 0 && pageNumber <= this.totalPages) {\n      this.push(\n        defaults(\n          {\n            key: pageNumber,\n            label: '' + pageNumber,\n            page: pageNumber,\n            active: pageNumber == this.currentPage\n          },\n          options\n        )\n      )\n    }\n  }\n\n  range(minPage, maxPage, options = {}) {\n    const min = Math.max(1, minPage)\n    const max = Math.min(maxPage, this.totalPages)\n    for (let i = min; i <= max; i++) {\n      this.page(i, options)\n    }\n  }\n\n  ellipsis(options = {}) {\n    this.push(\n      defaults(\n        {\n          key: 'ellipsis-' + this.pages.length,\n          label: '...',\n          disabled: true\n        },\n        options\n      )\n    )\n  }\n}\n\nexport const Paginator = {\n  build({\n    showNumbers = true,\n    showPrevious = true,\n    showNext = true,\n    showEllipsis = true,\n    showFirst = true,\n    showLast = false\n  }) {\n    return function(currentPage, totalPages, translate, pageScope = 3) {\n      const builder = new PaginationHelper({\n        currentPage,\n        totalPages,\n        translate\n      })\n      if (showPrevious) builder.previous()\n      if (showNumbers) {\n        if (showFirst && currentPage > pageScope + 1) builder.page(1)\n        if (showEllipsis && currentPage > pageScope + 2) builder.ellipsis()\n\n        builder.range(currentPage - pageScope, currentPage - 1)\n        builder.page(currentPage, { active: true })\n        builder.range(currentPage + 1, currentPage + pageScope)\n\n        const lastEllipsisLimit = showLast ? totalPages - pageScope - 1 : totalPages - pageScope\n        if (showEllipsis && currentPage < lastEllipsisLimit) builder.ellipsis()\n        if (showLast && currentPage < totalPages - pageScope) builder.page(totalPages)\n      }\n      if (showNext) builder.next()\n      return builder.pages\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}