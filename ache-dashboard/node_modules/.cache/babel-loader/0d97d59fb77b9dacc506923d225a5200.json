{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = require(\"../../core\");\n\nvar StatefulAccessor_1 = require(\"./StatefulAccessor\");\n\nvar head = require('lodash/head');\n\nvar find = require('lodash/find');\n\nvar ViewOptionsAccessor =\n/** @class */\nfunction (_super) {\n  __extends(ViewOptionsAccessor, _super);\n\n  function ViewOptionsAccessor(key, options) {\n    var _this = _super.call(this, key) || this;\n\n    _this.state = new core_1.ValueState();\n    _this.options = options;\n    return _this;\n  }\n\n  ViewOptionsAccessor.prototype.getSelectedOption = function () {\n    return find(this.options, {\n      key: this.state.getValue()\n    }) || find(this.options, {\n      defaultOption: true\n    }) || head(this.options);\n  };\n\n  ViewOptionsAccessor.prototype.setView = function (key) {\n    var view = find(this.options, {\n      key: key\n    });\n\n    if (view) {\n      if (view.defaultOption) {\n        this.state = this.state.clear();\n      } else {\n        this.state = this.state.setValue(view.key);\n      }\n\n      this.search();\n    }\n  };\n\n  ViewOptionsAccessor.prototype.search = function () {\n    //this won't fire search as query didn't change, but it will serialize url\n    //might need better way\n    this.searchkit.performSearch(false, false);\n    this.searchkit.emitter.trigger();\n  };\n\n  return ViewOptionsAccessor;\n}(StatefulAccessor_1.StatefulAccessor);\n\nexports.ViewOptionsAccessor = ViewOptionsAccessor;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA,IAAMA,IAAI,GAAGC,OAAO,CAAC,aAAD,CAApB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,aAAD,CAApB;;AAEA;AAAA;AAAA;EAAyCE;;EAGvC,6BAAYC,GAAZ,EAAiBC,OAAjB,EAAoC;IAApC,YACEC,kBAAMF,GAAN,KAAU,IADZ;;IAFAG,cAAQ,IAAIC,iBAAJ,EAAR;IAIED,KAAI,CAACF,OAAL,GAAeA,OAAf;;EACD;;EAEDI;IACE,OACEP,IAAI,CAAC,KAAKG,OAAN,EAAe;MAAED,GAAG,EAAE,KAAKM,KAAL,CAAWC,QAAX;IAAP,CAAf,CAAJ,IACAT,IAAI,CAAC,KAAKG,OAAN,EAAe;MAAEO,aAAa,EAAE;IAAjB,CAAf,CADJ,IAEAZ,IAAI,CAAC,KAAKK,OAAN,CAHN;EAKD,CAND;;EAQAI,kDAAQL,GAAR,EAAW;IACT,IAAMS,IAAI,GAAGX,IAAI,CAAC,KAAKG,OAAN,EAAe;MAAED,GAAG;IAAL,CAAf,CAAjB;;IACA,IAAIS,IAAJ,EAAU;MACR,IAAIA,IAAI,CAACD,aAAT,EAAwB;QACtB,KAAKF,KAAL,GAAa,KAAKA,KAAL,CAAWI,KAAX,EAAb;MACD,CAFD,MAEO;QACL,KAAKJ,KAAL,GAAa,KAAKA,KAAL,CAAWK,QAAX,CAAoBF,IAAI,CAACT,GAAzB,CAAb;MACD;;MACD,KAAKY,MAAL;IACD;EACF,CAVD;;EAYAP;IACE;IACA;IACA,KAAKQ,SAAL,CAAeC,aAAf,CAA6B,KAA7B,EAAoC,KAApC;IACA,KAAKD,SAAL,CAAeE,OAAf,CAAuBC,OAAvB;EACD,CALD;;EAMF;AAAC,CAlCD,CAAyCC,mCAAzC;;AAAaC","names":["head","require","find","__extends","key","options","_super","_this","core_1","ViewOptionsAccessor","state","getValue","defaultOption","view","clear","setValue","search","searchkit","performSearch","emitter","trigger","StatefulAccessor_1","exports"],"sources":["C:\\Users\\mnavas\\CODE\\SmartBIC\\ache-multilingual\\ache-dashboard\\node_modules\\searchkit\\src\\core\\accessors\\ViewOptionsAccessor.ts"],"sourcesContent":["import { ValueState } from '../../core'\nimport { StatefulAccessor } from './StatefulAccessor'\nconst head = require('lodash/head')\nconst find = require('lodash/find')\n\nexport class ViewOptionsAccessor extends StatefulAccessor<ValueState> {\n  state = new ValueState()\n  options: Array<any>\n  constructor(key, options: Array<any>) {\n    super(key)\n    this.options = options\n  }\n\n  getSelectedOption() {\n    return (\n      find(this.options, { key: this.state.getValue() }) ||\n      find(this.options, { defaultOption: true }) ||\n      head(this.options)\n    )\n  }\n\n  setView(key) {\n    const view = find(this.options, { key })\n    if (view) {\n      if (view.defaultOption) {\n        this.state = this.state.clear()\n      } else {\n        this.state = this.state.setValue(view.key)\n      }\n      this.search()\n    }\n  }\n\n  search() {\n    //this won't fire search as query didn't change, but it will serialize url\n    //might need better way\n    this.searchkit.performSearch(false, false)\n    this.searchkit.emitter.trigger()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}