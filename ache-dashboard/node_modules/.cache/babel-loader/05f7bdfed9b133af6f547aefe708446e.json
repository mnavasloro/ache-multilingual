{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar query_1 = require(\"../query\");\n\nvar BaseQueryAccessor_1 = require(\"./BaseQueryAccessor\");\n\nvar assign = require('lodash/assign');\n\nvar QueryAccessor =\n/** @class */\nfunction (_super) {\n  __extends(QueryAccessor, _super);\n\n  function QueryAccessor(key, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, key) || this;\n\n    _this.options = options;\n    _this.options.queryFields = _this.options.queryFields || ['_all'];\n    return _this;\n  }\n\n  QueryAccessor.prototype.fromQueryObject = function (ob) {\n    _super.prototype.fromQueryObject.call(this, ob);\n\n    if (this.options.onQueryStateChange) {\n      this.options.onQueryStateChange();\n    }\n  };\n\n  QueryAccessor.prototype.buildSharedQuery = function (query) {\n    var _this = this;\n\n    var queryStr = this.state.getValue();\n\n    if (queryStr) {\n      var queryBuilder = this.options.queryBuilder || query_1.SimpleQueryString;\n      var simpleQuery = queryBuilder(queryStr, assign({\n        fields: this.options.queryFields\n      }, this.options.queryOptions));\n      var queries = [simpleQuery];\n\n      if (this.options.prefixQueryFields) {\n        queries.push(query_1.MultiMatchQuery(queryStr, assign(this.options.prefixQueryOptions, {\n          type: 'phrase_prefix',\n          fields: this.options.prefixQueryFields\n        })));\n      }\n\n      query = query.addQuery(query_1.BoolShould(queries));\n\n      if (this.options.addToFilters) {\n        query = query.addSelectedFilter({\n          name: this.options.title,\n          value: queryStr,\n          id: this.key,\n          remove: function remove() {\n            return _this.state = _this.state.clear();\n          }\n        });\n      } else {\n        query = query.setQueryString(queryStr);\n      }\n\n      return query;\n    }\n\n    return query;\n  };\n\n  return QueryAccessor;\n}(BaseQueryAccessor_1.BaseQueryAccessor);\n\nexports.QueryAccessor = QueryAccessor;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,eAAD,CAAtB;;AAYA;AAAA;AAAA;EAAmCC;;EAGjC,uBAAYC,GAAZ,EAAiBC,OAAjB,EAA6B;IAAZ;MAAAA;IAAY;;IAA7B,YACEC,kBAAMF,GAAN,KAAU,IADZ;;IAEEG,KAAI,CAACF,OAAL,GAAeA,OAAf;IACAE,KAAI,CAACF,OAAL,CAAaG,WAAb,GAA2BD,KAAI,CAACF,OAAL,CAAaG,WAAb,IAA4B,CAAC,MAAD,CAAvD;;EACD;;EAEDC,oDAAgBC,EAAhB,EAAkB;IAChBJ,iBAAMK,eAAN,CAAqBC,IAArB,CAAqB,IAArB,EAAsBF,EAAtB;;IACA,IAAI,KAAKL,OAAL,CAAaQ,kBAAjB,EAAqC;MACnC,KAAKR,OAAL,CAAaQ,kBAAb;IACD;EACF,CALD;;EAOAJ,qDAAiBK,KAAjB,EAAsB;IAAtB;;IACE,IAAMC,QAAQ,GAAG,KAAKC,KAAL,CAAWC,QAAX,EAAjB;;IACA,IAAIF,QAAJ,EAAc;MACZ,IAAMG,YAAY,GAAG,KAAKb,OAAL,CAAaa,YAAb,IAA6BC,yBAAlD;MACA,IAAMC,WAAW,GAAGF,YAAY,CAC9BH,QAD8B,EAE9Bd,MAAM,CAAC;QAAEoB,MAAM,EAAE,KAAKhB,OAAL,CAAaG;MAAvB,CAAD,EAAuC,KAAKH,OAAL,CAAaiB,YAApD,CAFwB,CAAhC;MAKA,IAAMC,OAAO,GAAe,CAACH,WAAD,CAA5B;;MAEA,IAAI,KAAKf,OAAL,CAAamB,iBAAjB,EAAoC;QAClCD,OAAO,CAACE,IAAR,CACEN,wBACEJ,QADF,EAEEd,MAAM,CAAC,KAAKI,OAAL,CAAaqB,kBAAd,EAAkC;UACtCC,IAAI,EAAE,eADgC;UAEtCN,MAAM,EAAE,KAAKhB,OAAL,CAAamB;QAFiB,CAAlC,CAFR,CADF;MASD;;MACDV,KAAK,GAAGA,KAAK,CAACc,QAAN,CAAeT,mBAAWI,OAAX,CAAf,CAAR;;MAEA,IAAI,KAAKlB,OAAL,CAAawB,YAAjB,EAA+B;QAC7Bf,KAAK,GAAGA,KAAK,CAACgB,iBAAN,CAAwB;UAC9BC,IAAI,EAAE,KAAK1B,OAAL,CAAa2B,KADW;UAE9BC,KAAK,EAAElB,QAFuB;UAG9BmB,EAAE,EAAE,KAAK9B,GAHqB;UAI9B+B,MAAM,EAAE;YAAM,OAAC5B,KAAI,CAACS,KAAL,GAAaT,KAAI,CAACS,KAAL,CAAWoB,KAAX,EAAd;UAAiC;QAJjB,CAAxB,CAAR;MAMD,CAPD,MAOO;QACLtB,KAAK,GAAGA,KAAK,CAACuB,cAAN,CAAqBtB,QAArB,CAAR;MACD;;MAED,OAAOD,KAAP;IACD;;IACD,OAAOA,KAAP;EACD,CAtCD;;EAuCF;AAAC,CAvDD,CAAmCwB,qCAAnC;;AAAaC","names":["assign","require","__extends","key","options","_super","_this","queryFields","QueryAccessor","ob","fromQueryObject","call","onQueryStateChange","query","queryStr","state","getValue","queryBuilder","query_1","simpleQuery","fields","queryOptions","queries","prefixQueryFields","push","prefixQueryOptions","type","addQuery","addToFilters","addSelectedFilter","name","title","value","id","remove","clear","setQueryString","BaseQueryAccessor_1","exports"],"sources":["C:\\Users\\mnavas\\CODE\\SmartBIC\\ache-multilingual\\ache-dashboard\\node_modules\\searchkit\\src\\core\\accessors\\QueryAccessor.ts"],"sourcesContent":["import { MultiMatchQuery, BoolShould, SimpleQueryString } from '../query'\nimport { BaseQueryAccessor } from './BaseQueryAccessor'\n\nconst assign = require('lodash/assign')\n\nexport interface SearchOptions {\n  queryFields?: Array<string>\n  queryOptions?: any\n  prefixQueryFields?: Array<string>\n  prefixQueryOptions?: Record<string, any>\n  title?: string\n  addToFilters?: boolean\n  queryBuilder?: Function\n  onQueryStateChange?: Function\n}\nexport class QueryAccessor extends BaseQueryAccessor {\n  options: SearchOptions\n\n  constructor(key, options = {}) {\n    super(key)\n    this.options = options\n    this.options.queryFields = this.options.queryFields || ['_all']\n  }\n\n  fromQueryObject(ob) {\n    super.fromQueryObject(ob)\n    if (this.options.onQueryStateChange) {\n      this.options.onQueryStateChange()\n    }\n  }\n\n  buildSharedQuery(query) {\n    const queryStr = this.state.getValue()\n    if (queryStr) {\n      const queryBuilder = this.options.queryBuilder || SimpleQueryString\n      const simpleQuery = queryBuilder(\n        queryStr,\n        assign({ fields: this.options.queryFields }, this.options.queryOptions)\n      )\n\n      const queries: Array<any> = [simpleQuery]\n\n      if (this.options.prefixQueryFields) {\n        queries.push(\n          MultiMatchQuery(\n            queryStr,\n            assign(this.options.prefixQueryOptions, {\n              type: 'phrase_prefix',\n              fields: this.options.prefixQueryFields\n            })\n          )\n        )\n      }\n      query = query.addQuery(BoolShould(queries))\n\n      if (this.options.addToFilters) {\n        query = query.addSelectedFilter({\n          name: this.options.title,\n          value: queryStr,\n          id: this.key,\n          remove: () => (this.state = this.state.clear())\n        })\n      } else {\n        query = query.setQueryString(queryStr)\n      }\n\n      return query\n    }\n    return query\n  }\n}\n"]},"metadata":{},"sourceType":"script"}