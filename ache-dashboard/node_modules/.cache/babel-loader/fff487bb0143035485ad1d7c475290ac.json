{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar support_1 = require(\"../support\");\n\nvar get = require('lodash/get');\n\nvar compact = require('lodash/compact');\n\nvar Accessor =\n/** @class */\nfunction () {\n  function Accessor() {\n    this.active = true;\n    this.translations = {};\n    this.refCount = 0;\n  }\n\n  Accessor.prototype.incrementRef = function () {\n    this.refCount++;\n  };\n\n  Accessor.prototype.decrementRef = function () {\n    this.refCount--;\n  };\n\n  Accessor.prototype.setActive = function (active) {\n    this.active = active;\n    return this;\n  };\n\n  Accessor.prototype.setSearchkitManager = function (searchkit) {\n    this.searchkit = searchkit;\n    this.uuid = searchkit.guid();\n    this.results = this.searchkit.results;\n  };\n\n  Accessor.prototype.translate = function (key, interpolations) {\n    var translation = this.searchkit && this.searchkit.translate(key) || this.translations[key] || key;\n    return support_1.Utils.translate(translation, interpolations);\n  };\n\n  Accessor.prototype.getResults = function () {\n    return this.results;\n  };\n\n  Accessor.prototype.setResults = function (results) {\n    this.results = results;\n  };\n\n  Accessor.prototype.getAggregations = function (path, defaultValue) {\n    var results = this.getResults();\n    var getPath = compact(__spreadArrays(['aggregations'], path));\n    return get(results, getPath, defaultValue);\n  };\n\n  Accessor.prototype.beforeBuildQuery = function () {};\n\n  Accessor.prototype.buildSharedQuery = function (query) {\n    return query;\n  };\n\n  Accessor.prototype.buildOwnQuery = function (query) {\n    return query;\n  };\n\n  return Accessor;\n}();\n\nexports.Accessor = Accessor;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAEA;;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AAEA;AAAA;AAAA;EAOE;IACE,KAAKE,MAAL,GAAc,IAAd;IACA,KAAKC,YAAL,GAAoB,EAApB;IACA,KAAKC,QAAL,GAAgB,CAAhB;EACD;;EAEDC;IACE,KAAKD,QAAL;EACD,CAFD;;EAIAC;IACE,KAAKD,QAAL;EACD,CAFD;;EAIAC,yCAAUH,MAAV,EAAyB;IACvB,KAAKA,MAAL,GAAcA,MAAd;IACA,OAAO,IAAP;EACD,CAHD;;EAKAG,mDAAoBC,SAApB,EAA6B;IAC3B,KAAKA,SAAL,GAAiBA,SAAjB;IACA,KAAKC,IAAL,GAAYD,SAAS,CAACE,IAAV,EAAZ;IACA,KAAKC,OAAL,GAAe,KAAKH,SAAL,CAAeG,OAA9B;EACD,CAJD;;EAMAJ,yCAAUK,GAAV,EAAeC,cAAf,EAA8B;IAC5B,IAAMC,WAAW,GACd,KAAKN,SAAL,IAAkB,KAAKA,SAAL,CAAeO,SAAf,CAAyBH,GAAzB,CAAnB,IAAqD,KAAKP,YAAL,CAAkBO,GAAlB,CAArD,IAA+EA,GADjF;IAEA,OAAOI,gBAAMD,SAAN,CAAgBD,WAAhB,EAA6BD,cAA7B,CAAP;EACD,CAJD;;EAMAN;IACE,OAAO,KAAKI,OAAZ;EACD,CAFD;;EAIAJ,0CAAWI,OAAX,EAAkB;IAChB,KAAKA,OAAL,GAAeA,OAAf;EACD,CAFD;;EAIAJ,+CAAgBU,IAAhB,EAAsBC,YAAtB,EAAkC;IAChC,IAAMP,OAAO,GAAG,KAAKQ,UAAL,EAAhB;IACA,IAAMC,OAAO,GAAGjB,OAAO,iBAAE,cAAF,GAAqBc,IAArB,EAAvB;IACA,OAAOhB,GAAG,CAACU,OAAD,EAAUS,OAAV,EAAmBF,YAAnB,CAAV;EACD,CAJD;;EAMAX,mDAAqB,CAArB;;EACAA,gDAAiBc,KAAjB,EAAsC;IACpC,OAAOA,KAAP;EACD,CAFD;;EAGAd,6CAAcc,KAAd,EAAmC;IACjC,OAAOA,KAAP;EACD,CAFD;;EAGF;AAAC,CA3DD;;AAAaC","names":["get","require","compact","active","translations","refCount","Accessor","searchkit","uuid","guid","results","key","interpolations","translation","translate","support_1","path","defaultValue","getResults","getPath","query","exports"],"sources":["C:\\Users\\mnavas\\CODE\\SmartBIC\\ache-multilingual\\ache-dashboard\\node_modules\\searchkit\\src\\core\\accessors\\Accessor.ts"],"sourcesContent":["import { ImmutableQuery } from '../query/ImmutableQuery'\nimport { SearchkitManager } from '../SearchkitManager'\nimport { Utils } from '../support'\nconst get = require('lodash/get')\nconst compact = require('lodash/compact')\n\nexport class Accessor {\n  searchkit: SearchkitManager\n  uuid: string\n  results: any\n  active: boolean\n  translations: Record<string, any>\n  refCount: number\n  constructor() {\n    this.active = true\n    this.translations = {}\n    this.refCount = 0\n  }\n\n  incrementRef() {\n    this.refCount++\n  }\n\n  decrementRef() {\n    this.refCount--\n  }\n\n  setActive(active: boolean) {\n    this.active = active\n    return this\n  }\n\n  setSearchkitManager(searchkit) {\n    this.searchkit = searchkit\n    this.uuid = searchkit.guid()\n    this.results = this.searchkit.results\n  }\n\n  translate(key, interpolations?) {\n    const translation =\n      (this.searchkit && this.searchkit.translate(key)) || this.translations[key] || key\n    return Utils.translate(translation, interpolations)\n  }\n\n  getResults() {\n    return this.results\n  }\n\n  setResults(results) {\n    this.results = results\n  }\n\n  getAggregations(path, defaultValue) {\n    const results = this.getResults()\n    const getPath = compact(['aggregations', ...path])\n    return get(results, getPath, defaultValue)\n  }\n\n  beforeBuildQuery() {}\n  buildSharedQuery(query: ImmutableQuery) {\n    return query\n  }\n  buildOwnQuery(query: ImmutableQuery) {\n    return query\n  }\n}\n"]},"metadata":{},"sourceType":"script"}