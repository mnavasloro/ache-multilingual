{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar accessors_1 = require(\"./accessors\");\n\nvar support_1 = require(\"./support\");\n\nvar query_1 = require(\"./query\");\n\nvar filter = require('lodash/filter');\n\nvar values = require('lodash/values');\n\nvar reduce = require('lodash/reduce');\n\nvar assign = require('lodash/assign');\n\nvar each = require('lodash/each');\n\nvar without = require('lodash/without');\n\nvar find = require('lodash/find');\n\nvar AccessorManager =\n/** @class */\nfunction () {\n  function AccessorManager() {\n    this.accessors = [];\n    this.queryAccessor = accessors_1.noopQueryAccessor;\n    this.statefulAccessors = {};\n  }\n\n  AccessorManager.prototype.getAccessors = function () {\n    return this.accessors;\n  };\n\n  AccessorManager.prototype.getActiveAccessors = function () {\n    return filter(this.accessors, {\n      active: true\n    });\n  };\n\n  AccessorManager.prototype.getStatefulAccessors = function () {\n    return values(this.statefulAccessors);\n  };\n\n  AccessorManager.prototype.getAccessorsByType = function (type) {\n    return filter(this.accessors, support_1.Utils.instanceOf(type));\n  };\n\n  AccessorManager.prototype.getAccessorByType = function (type) {\n    return find(this.accessors, support_1.Utils.instanceOf(type));\n  };\n\n  AccessorManager.prototype.add = function (accessor) {\n    if (accessor instanceof accessors_1.StatefulAccessor) {\n      if (accessor instanceof accessors_1.BaseQueryAccessor && accessor.key == 'q') {\n        if (this.queryAccessor !== accessors_1.noopQueryAccessor) {\n          throw new Error('Only a single instance of BaseQueryAccessor is allowed');\n        } else {\n          this.queryAccessor = accessor;\n        }\n      }\n\n      var existingAccessor = this.statefulAccessors[accessor.key];\n\n      if (existingAccessor) {\n        if (existingAccessor.constructor === accessor.constructor) {\n          existingAccessor.incrementRef();\n          return existingAccessor;\n        }\n\n        throw new Error(\"Multiple imcompatible components with id='\" + accessor.key + \"' existing on the page\");\n      } else {\n        this.statefulAccessors[accessor.key] = accessor;\n      }\n    }\n\n    accessor.incrementRef();\n    this.accessors.push(accessor);\n    return accessor;\n  };\n\n  AccessorManager.prototype.remove = function (accessor) {\n    if (!accessor) {\n      return;\n    }\n\n    accessor.decrementRef();\n\n    if (accessor.refCount === 0) {\n      if (accessor instanceof accessors_1.StatefulAccessor) {\n        if (this.queryAccessor == accessor) {\n          this.queryAccessor = accessors_1.noopQueryAccessor;\n        }\n\n        delete this.statefulAccessors[accessor.key];\n      }\n\n      this.accessors = without(this.accessors, accessor);\n    }\n  };\n\n  AccessorManager.prototype.getState = function () {\n    return reduce(this.getStatefulAccessors(), function (state, accessor) {\n      return assign(state, accessor.getQueryObject());\n    }, {});\n  };\n\n  AccessorManager.prototype.setState = function (state) {\n    each(this.getStatefulAccessors(), function (accessor) {\n      return accessor.fromQueryObject(state);\n    });\n  };\n\n  AccessorManager.prototype.notifyStateChange = function (oldState) {\n    each(this.getStatefulAccessors(), function (accessor) {\n      return accessor.onStateChange(oldState);\n    });\n  };\n\n  AccessorManager.prototype.getQueryAccessor = function () {\n    return this.queryAccessor;\n  };\n\n  AccessorManager.prototype.buildSharedQuery = function (query) {\n    return reduce(this.getActiveAccessors(), function (query, accessor) {\n      return accessor.buildSharedQuery(query);\n    }, query);\n  };\n\n  AccessorManager.prototype.buildOwnQuery = function (query) {\n    return reduce(this.getActiveAccessors(), function (query, accessor) {\n      return accessor.buildOwnQuery(query);\n    }, query);\n  };\n\n  AccessorManager.prototype.buildQuery = function () {\n    each(this.getActiveAccessors(), function (accessor) {\n      return accessor.beforeBuildQuery();\n    });\n    return this.buildOwnQuery(this.buildSharedQuery(new query_1.ImmutableQuery()));\n  };\n\n  AccessorManager.prototype.setResults = function (results) {\n    each(this.accessors, function (a) {\n      return a.setResults(results);\n    });\n  };\n\n  AccessorManager.prototype.resetState = function () {\n    each(this.getStatefulAccessors(), function (a) {\n      return a.resetState();\n    });\n  };\n\n  return AccessorManager;\n}();\n\nexports.AccessorManager = AccessorManager;","map":{"version":3,"mappings":"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","names":["filter","require","values","reduce","assign","each","without","find","accessors","queryAccessor","accessors_1","statefulAccessors","AccessorManager","active","type","support_1","instanceOf","accessor","key","Error","existingAccessor","constructor","incrementRef","push","decrementRef","refCount","getStatefulAccessors","state","getQueryObject","fromQueryObject","oldState","onStateChange","query","getActiveAccessors","buildSharedQuery","buildOwnQuery","beforeBuildQuery","query_1","results","a","setResults","resetState","exports"],"sources":["C:\\Users\\mnavas\\CODE\\SmartBIC\\ache-multilingual\\ache-dashboard\\node_modules\\searchkit\\src\\core\\AccessorManager.ts"],"sourcesContent":["import { Accessor, StatefulAccessor, BaseQueryAccessor, noopQueryAccessor } from './accessors'\nimport { Utils } from './support'\nimport { ImmutableQuery } from './query'\nconst filter = require('lodash/filter')\nconst values = require('lodash/values')\nconst reduce = require('lodash/reduce')\nconst assign = require('lodash/assign')\nconst each = require('lodash/each')\nconst without = require('lodash/without')\nconst find = require('lodash/find')\n\ntype StatefulAccessors = Array<StatefulAccessor<any>>\n\nexport class AccessorManager {\n  accessors: Array<Accessor>\n  statefulAccessors: {}\n  queryAccessor: BaseQueryAccessor\n\n  constructor() {\n    this.accessors = []\n    this.queryAccessor = noopQueryAccessor\n    this.statefulAccessors = {}\n  }\n\n  getAccessors() {\n    return this.accessors\n  }\n\n  getActiveAccessors() {\n    return filter(this.accessors, { active: true })\n  }\n\n  getStatefulAccessors() {\n    return values(this.statefulAccessors) as StatefulAccessors\n  }\n\n  getAccessorsByType(type) {\n    return filter(this.accessors, Utils.instanceOf(type))\n  }\n\n  getAccessorByType(type) {\n    return find(this.accessors, Utils.instanceOf(type))\n  }\n\n  add(accessor) {\n    if (accessor instanceof StatefulAccessor) {\n      if (accessor instanceof BaseQueryAccessor && accessor.key == 'q') {\n        if (this.queryAccessor !== noopQueryAccessor) {\n          throw new Error('Only a single instance of BaseQueryAccessor is allowed')\n        } else {\n          this.queryAccessor = accessor\n        }\n      }\n      const existingAccessor = this.statefulAccessors[accessor.key]\n      if (existingAccessor) {\n        if (existingAccessor.constructor === accessor.constructor) {\n          existingAccessor.incrementRef()\n          return existingAccessor\n        }\n        throw new Error(\n          `Multiple imcompatible components with id='${accessor.key}' existing on the page`\n        )\n      } else {\n        this.statefulAccessors[accessor.key] = accessor\n      }\n    }\n    accessor.incrementRef()\n    this.accessors.push(accessor)\n    return accessor\n  }\n\n  remove(accessor) {\n    if (!accessor) {\n      return\n    }\n    accessor.decrementRef()\n    if (accessor.refCount === 0) {\n      if (accessor instanceof StatefulAccessor) {\n        if (this.queryAccessor == accessor) {\n          this.queryAccessor = noopQueryAccessor\n        }\n        delete this.statefulAccessors[accessor.key]\n      }\n      this.accessors = without(this.accessors, accessor)\n    }\n  }\n\n  getState() {\n    return reduce(\n      this.getStatefulAccessors(),\n      (state, accessor) => assign(state, accessor.getQueryObject()),\n      {}\n    )\n  }\n\n  setState(state) {\n    each(this.getStatefulAccessors(), (accessor) => accessor.fromQueryObject(state))\n  }\n  notifyStateChange(oldState) {\n    each(this.getStatefulAccessors(), (accessor) => accessor.onStateChange(oldState))\n  }\n\n  getQueryAccessor() {\n    return this.queryAccessor\n  }\n\n  buildSharedQuery(query) {\n    return reduce(\n      this.getActiveAccessors(),\n      (query, accessor) => accessor.buildSharedQuery(query),\n      query\n    )\n  }\n\n  buildOwnQuery(query) {\n    return reduce(\n      this.getActiveAccessors(),\n      (query, accessor) => accessor.buildOwnQuery(query),\n      query\n    )\n  }\n\n  buildQuery() {\n    each(this.getActiveAccessors(), (accessor) => accessor.beforeBuildQuery())\n    return this.buildOwnQuery(this.buildSharedQuery(new ImmutableQuery()))\n  }\n\n  setResults(results) {\n    each(this.accessors, (a) => a.setResults(results))\n  }\n\n  resetState() {\n    each(this.getStatefulAccessors(), (a) => a.resetState())\n  }\n}\n"]},"metadata":{},"sourceType":"script"}