{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar query_1 = require(\"./query\");\n\nvar accessors_1 = require(\"./accessors\");\n\nvar AccessorManager_1 = require(\"./AccessorManager\");\n\nvar transport_1 = require(\"./transport\");\n\nvar SearchRequest_1 = require(\"./SearchRequest\");\n\nvar support_1 = require(\"./support\");\n\nvar history_1 = require(\"./history\");\n\nvar defaults = require('lodash/defaults');\n\nvar constant = require('lodash/constant');\n\nvar identity = require('lodash/identity');\n\nvar map = require('lodash/map');\n\nvar isEqual = require('lodash/isEqual');\n\nvar get = require('lodash/get');\n\nvar SearchkitManager =\n/** @class */\nfunction () {\n  function SearchkitManager(host, options, initialState) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (initialState === void 0) {\n      initialState = {};\n    }\n\n    this.options = defaults(options, {\n      useHistory: true,\n      httpHeaders: {},\n      searchOnLoad: true,\n      defaultSize: 20,\n      createHistory: history_1.createHistoryInstance,\n      getLocation: function getLocation() {\n        return typeof window !== 'undefined' && window.location;\n      }\n    });\n    this.host = host;\n    this.guidGenerator = new support_1.GuidGenerator();\n    this.results = initialState.results;\n    this.state = initialState.state || {};\n    this.transport = this.options.transport || new transport_1.AxiosESTransport(host, {\n      headers: this.options.httpHeaders,\n      basicAuth: this.options.basicAuth,\n      searchUrlPath: this.options.searchUrlPath,\n      timeout: this.options.timeout,\n      withCredentials: this.options.withCredentials\n    });\n    this.accessors = new AccessorManager_1.AccessorManager();\n    this.accessors.add(new accessors_1.PageSizeAccessor(this.options.defaultSize));\n    this.registrationCompleted = new Promise(function (resolve) {\n      _this.completeRegistration = resolve;\n    });\n    this.translateFunction = constant(undefined);\n    this.queryProcessor = identity;\n\n    this.shouldPerformSearch = function () {\n      return true;\n    };\n\n    this.query = new query_1.ImmutableQuery();\n    this.emitter = new support_1.EventEmitter();\n    this.resultsEmitter = new support_1.EventEmitter();\n  }\n\n  SearchkitManager.mock = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var searchkit = new SearchkitManager('/', __assign({\n      useHistory: false,\n      transport: new transport_1.MockESTransport()\n    }, options));\n    searchkit.setupListeners();\n    return searchkit;\n  };\n\n  SearchkitManager.prototype.setupListeners = function () {\n    this.initialLoading = !this.results;\n\n    if (this.options.useHistory) {\n      this.unlistenHistory();\n      this.history = this.options.createHistory();\n      this.listenToHistory();\n    }\n\n    this.runInitialSearch();\n  };\n\n  SearchkitManager.prototype.addAccessor = function (accessor) {\n    accessor.setSearchkitManager(this);\n    return this.accessors.add(accessor);\n  };\n\n  SearchkitManager.prototype.removeAccessor = function (accessor) {\n    this.accessors.remove(accessor);\n  };\n\n  SearchkitManager.prototype.addDefaultQuery = function (fn) {\n    return this.addAccessor(new accessors_1.AnonymousAccessor(fn));\n  };\n\n  SearchkitManager.prototype.setQueryProcessor = function (fn) {\n    this.queryProcessor = fn;\n  };\n\n  SearchkitManager.prototype.translate = function (key) {\n    return this.translateFunction(key);\n  };\n\n  SearchkitManager.prototype.buildQuery = function () {\n    return this.accessors.buildQuery();\n  };\n\n  SearchkitManager.prototype.resetState = function () {\n    this.accessors.resetState();\n  };\n\n  SearchkitManager.prototype.addResultsListener = function (fn) {\n    return this.resultsEmitter.addListener(fn);\n  };\n\n  SearchkitManager.prototype.unlistenHistory = function () {\n    if (this.options.useHistory && this._unlistenHistory) {\n      this._unlistenHistory();\n    }\n  };\n\n  SearchkitManager.prototype.listenToHistory = function () {\n    var _this = this;\n\n    this._unlistenHistory = this.history.listen(function (location, action) {\n      if (action === 'POP') {\n        _this._searchWhenCompleted(location);\n      }\n    });\n  };\n\n  SearchkitManager.prototype._searchWhenCompleted = function (location) {\n    var _this = this;\n\n    this.registrationCompleted.then(function () {\n      _this.searchFromUrlQuery(location.search);\n    }).catch(function (e) {\n      console.error(e);\n    });\n  };\n\n  SearchkitManager.prototype.runInitialSearch = function () {\n    if (this.options.searchOnLoad) {\n      this._searchWhenCompleted(this.options.getLocation());\n    }\n  };\n\n  SearchkitManager.prototype.searchFromUrlQuery = function (query) {\n    query = history_1.decodeObjString(query.replace(/^\\?/, ''));\n    this.accessors.setState(query);\n    return this._search();\n  };\n\n  SearchkitManager.prototype.performSearch = function (replaceState, notifyState) {\n    if (replaceState === void 0) {\n      replaceState = false;\n    }\n\n    if (notifyState === void 0) {\n      notifyState = true;\n    }\n\n    if (notifyState && !isEqual(this.accessors.getState(), this.state)) {\n      this.accessors.notifyStateChange(this.state);\n    }\n\n    var searchPromise = this._search();\n\n    if (this.options.useHistory) {\n      var historyMethod = replaceState ? this.history.replace : this.history.push;\n      var url = this.options.getLocation().pathname + '?' + history_1.encodeObjUrl(this.state);\n      historyMethod.call(this.history, url);\n    }\n\n    return searchPromise;\n  };\n\n  SearchkitManager.prototype.buildSearchUrl = function (extraParams) {\n    if (extraParams === void 0) {\n      extraParams = {};\n    }\n\n    var params = defaults(extraParams, this.state || this.accessors.getState());\n    return this.options.getLocation().pathname + '?' + history_1.encodeObjUrl(params);\n  };\n\n  SearchkitManager.prototype.reloadSearch = function () {\n    delete this.query;\n    return this.performSearch();\n  };\n\n  SearchkitManager.prototype.search = function (replaceState) {\n    if (replaceState === void 0) {\n      replaceState = false;\n    }\n\n    return this.performSearch(replaceState);\n  };\n\n  SearchkitManager.prototype.getResultsAndState = function () {\n    return {\n      results: this.results,\n      state: this.state\n    };\n  };\n\n  SearchkitManager.prototype._search = function () {\n    var _this = this;\n\n    this.state = this.accessors.getState();\n    var query = this.buildQuery();\n\n    if (!this.shouldPerformSearch(query)) {\n      return Promise.resolve(this.getResultsAndState());\n    }\n\n    if (this.results && this.query && isEqual(query.getJSON(), this.query.getJSON())) {\n      return Promise.resolve(this.getResultsAndState());\n    }\n\n    this.query = query;\n    this.loading = true;\n    this.emitter.trigger();\n    var queryObject = this.queryProcessor(this.query.getJSON());\n    this.currentSearchRequest && this.currentSearchRequest.deactivate();\n    this.currentSearchRequest = new SearchRequest_1.SearchRequest(this.transport, queryObject, this);\n    return this.currentSearchRequest.run().then(function () {\n      return _this.getResultsAndState();\n    });\n  };\n\n  SearchkitManager.prototype.setResults = function (results) {\n    this.compareResults(this.results, results);\n    this.results = results;\n    this.error = null;\n    this.accessors.setResults(results);\n    this.onResponseChange();\n    this.resultsEmitter.trigger(this.results);\n  };\n\n  SearchkitManager.prototype.compareResults = function (previousResults, results) {\n    var ids = map(get(results, ['hits', 'hits'], []), '_id').join(',');\n    var previousIds = get(previousResults, ['hits', 'ids'], '');\n\n    if (results.hits) {\n      results.hits.ids = ids;\n      results.hits.hasChanged = !(ids && ids === previousIds);\n    }\n  };\n\n  SearchkitManager.prototype.guid = function (prefix) {\n    return this.guidGenerator.guid(prefix);\n  };\n\n  SearchkitManager.prototype.getHits = function () {\n    return get(this.results, ['hits', 'hits'], []);\n  };\n\n  SearchkitManager.prototype.getHitsCount = function () {\n    var hitsCount = get(this.results, ['hits', 'total'], 0);\n\n    if (typeof hitsCount === 'object') {\n      return hitsCount.value;\n    }\n\n    return hitsCount;\n  };\n\n  SearchkitManager.prototype.getTime = function () {\n    return get(this.results, 'took', 0);\n  };\n\n  SearchkitManager.prototype.getSuggestions = function () {\n    return get(this.results, ['suggest', 'suggestions'], {});\n  };\n\n  SearchkitManager.prototype.getQueryAccessor = function () {\n    return this.accessors.queryAccessor;\n  };\n\n  SearchkitManager.prototype.getAccessorsByType = function (type) {\n    return this.accessors.getAccessorsByType(type);\n  };\n\n  SearchkitManager.prototype.getAccessorByType = function (type) {\n    return this.accessors.getAccessorByType(type);\n  };\n\n  SearchkitManager.prototype.hasHits = function () {\n    return this.getHitsCount() > 0;\n  };\n\n  SearchkitManager.prototype.hasHitsChanged = function () {\n    return get(this.results, ['hits', 'hasChanged'], true);\n  };\n\n  SearchkitManager.prototype.setError = function (error) {\n    this.error = error;\n    console.error(this.error);\n    this.results = null;\n    this.accessors.setResults(null);\n    this.onResponseChange();\n  };\n\n  SearchkitManager.prototype.onResponseChange = function () {\n    this.loading = false;\n    this.initialLoading = false;\n    this.emitter.trigger();\n  };\n\n  return SearchkitManager;\n}();\n\nexports.SearchkitManager = SearchkitManager;","map":{"version":3,"mappings":"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","names":["defaults","require","constant","identity","map","isEqual","get","host","options","initialState","useHistory","httpHeaders","searchOnLoad","defaultSize","createHistory","history_1","getLocation","window","location","guidGenerator","support_1","results","state","transport","transport_1","headers","basicAuth","searchUrlPath","timeout","withCredentials","accessors","AccessorManager_1","add","accessors_1","registrationCompleted","Promise","resolve","_this","completeRegistration","translateFunction","undefined","queryProcessor","shouldPerformSearch","query","query_1","emitter","resultsEmitter","SearchkitManager","searchkit","__assign","setupListeners","initialLoading","unlistenHistory","history","listenToHistory","runInitialSearch","accessor","setSearchkitManager","remove","fn","addAccessor","key","buildQuery","resetState","addListener","_unlistenHistory","listen","action","_searchWhenCompleted","then","searchFromUrlQuery","search","catch","e","console","error","replace","setState","_search","replaceState","notifyState","getState","notifyStateChange","searchPromise","historyMethod","push","url","pathname","call","extraParams","params","performSearch","getResultsAndState","getJSON","loading","trigger","queryObject","currentSearchRequest","deactivate","SearchRequest_1","run","compareResults","setResults","onResponseChange","previousResults","ids","join","previousIds","hits","hasChanged","prefix","guid","hitsCount","value","queryAccessor","type","getAccessorsByType","getAccessorByType","getHitsCount","exports"],"sources":["C:\\Users\\mnavas\\CODE\\SmartBIC\\ache-multilingual\\ache-dashboard\\node_modules\\searchkit\\src\\core\\SearchkitManager.ts"],"sourcesContent":["import { ImmutableQuery } from './query'\nimport { BaseQueryAccessor, AnonymousAccessor, PageSizeAccessor } from './accessors'\nimport { AccessorManager } from './AccessorManager'\nimport { ESTransport, AxiosESTransport, MockESTransport } from './transport'\nimport { SearchRequest } from './SearchRequest'\nimport { EventEmitter, GuidGenerator } from './support'\nimport { createHistoryInstance, encodeObjUrl, decodeObjString } from './history'\n\nconst defaults = require('lodash/defaults')\nconst constant = require('lodash/constant')\nconst identity = require('lodash/identity')\nconst map = require('lodash/map')\nconst isEqual = require('lodash/isEqual')\nconst get = require('lodash/get')\n\nexport interface SearchkitOptions {\n  useHistory?: boolean\n  createHistory?: Function\n  getLocation?: Function\n  searchOnLoad?: boolean\n  httpHeaders?: Record<string, any>\n  basicAuth?: string\n  transport?: ESTransport\n  searchUrlPath?: string\n  timeout?: number\n  withCredentials?: boolean\n  defaultSize?: number\n}\n\nexport interface InitialState {\n  results?: Record<string, any>\n  state?: Record<string, any>\n}\n\nexport class SearchkitManager {\n  host: string\n  private registrationCompleted: Promise<any>\n  completeRegistration: Function\n  state: any\n  translateFunction: Function\n  currentSearchRequest: SearchRequest\n  history\n  guidGenerator: GuidGenerator\n  _unlistenHistory: Function\n  options: SearchkitOptions\n  transport: ESTransport\n  emitter: EventEmitter\n  resultsEmitter: EventEmitter\n  accessors: AccessorManager\n  queryProcessor: Function\n  shouldPerformSearch: Function\n  query: ImmutableQuery\n  loading: boolean\n  initialLoading: boolean\n  error: any\n  results: any\n\n  static mock(options = {}): SearchkitManager {\n    const searchkit = new SearchkitManager('/', {\n      useHistory: false,\n      transport: new MockESTransport(),\n      ...options\n    })\n    searchkit.setupListeners()\n    return searchkit\n  }\n\n  constructor(host: string, options: SearchkitOptions = {}, initialState: InitialState = {}) {\n    this.options = defaults(options, {\n      useHistory: true,\n      httpHeaders: {},\n      searchOnLoad: true,\n      defaultSize: 20,\n      createHistory: createHistoryInstance,\n      getLocation: () => typeof window !== 'undefined' && window.location\n    })\n    this.host = host\n    this.guidGenerator = new GuidGenerator()\n    this.results = initialState.results\n    this.state = initialState.state || {}\n    this.transport =\n      this.options.transport ||\n      new AxiosESTransport(host, {\n        headers: this.options.httpHeaders,\n        basicAuth: this.options.basicAuth,\n        searchUrlPath: this.options.searchUrlPath,\n        timeout: this.options.timeout,\n        withCredentials: this.options.withCredentials\n      })\n    this.accessors = new AccessorManager()\n    this.accessors.add(new PageSizeAccessor(this.options.defaultSize))\n    this.registrationCompleted = new Promise((resolve) => {\n      this.completeRegistration = resolve\n    })\n    this.translateFunction = constant(undefined)\n    this.queryProcessor = identity\n    this.shouldPerformSearch = () => true\n    this.query = new ImmutableQuery()\n    this.emitter = new EventEmitter()\n    this.resultsEmitter = new EventEmitter()\n  }\n\n  setupListeners() {\n    this.initialLoading = !this.results\n    if (this.options.useHistory) {\n      this.unlistenHistory()\n      this.history = this.options.createHistory()\n      this.listenToHistory()\n    }\n    this.runInitialSearch()\n  }\n  addAccessor(accessor) {\n    accessor.setSearchkitManager(this)\n    return this.accessors.add(accessor)\n  }\n\n  removeAccessor(accessor) {\n    this.accessors.remove(accessor)\n  }\n\n  addDefaultQuery(fn: Function) {\n    return this.addAccessor(new AnonymousAccessor(fn))\n  }\n\n  setQueryProcessor(fn: Function) {\n    this.queryProcessor = fn\n  }\n\n  translate(key) {\n    return this.translateFunction(key)\n  }\n\n  buildQuery() {\n    return this.accessors.buildQuery()\n  }\n\n  resetState() {\n    this.accessors.resetState()\n  }\n\n  addResultsListener(fn) {\n    return this.resultsEmitter.addListener(fn)\n  }\n\n  unlistenHistory() {\n    if (this.options.useHistory && this._unlistenHistory) {\n      this._unlistenHistory()\n    }\n  }\n  listenToHistory() {\n    this._unlistenHistory = this.history.listen((location, action) => {\n      if (action === 'POP') {\n        this._searchWhenCompleted(location)\n      }\n    })\n  }\n\n  _searchWhenCompleted(location) {\n    this.registrationCompleted\n      .then(() => {\n        this.searchFromUrlQuery(location.search)\n      })\n      .catch((e) => {\n        console.error(e)\n      })\n  }\n\n  runInitialSearch() {\n    if (this.options.searchOnLoad) {\n      this._searchWhenCompleted(this.options.getLocation())\n    }\n  }\n\n  searchFromUrlQuery(query) {\n    query = decodeObjString(query.replace(/^\\?/, ''))\n    this.accessors.setState(query)\n    return this._search()\n  }\n\n  performSearch(replaceState = false, notifyState = true) {\n    if (notifyState && !isEqual(this.accessors.getState(), this.state)) {\n      this.accessors.notifyStateChange(this.state)\n    }\n    const searchPromise = this._search()\n    if (this.options.useHistory) {\n      const historyMethod = replaceState ? this.history.replace : this.history.push\n\n      const url = this.options.getLocation().pathname + '?' + encodeObjUrl(this.state)\n      historyMethod.call(this.history, url)\n    }\n    return searchPromise\n  }\n\n  buildSearchUrl(extraParams = {}) {\n    const params = defaults(extraParams, this.state || this.accessors.getState())\n    return this.options.getLocation().pathname + '?' + encodeObjUrl(params)\n  }\n\n  reloadSearch() {\n    delete this.query\n    return this.performSearch()\n  }\n\n  search(replaceState = false) {\n    return this.performSearch(replaceState)\n  }\n\n  getResultsAndState() {\n    return {\n      results: this.results,\n      state: this.state\n    }\n  }\n  _search() {\n    this.state = this.accessors.getState()\n    const query = this.buildQuery()\n    if (!this.shouldPerformSearch(query)) {\n      return Promise.resolve(this.getResultsAndState())\n    }\n    if (this.results && this.query && isEqual(query.getJSON(), this.query.getJSON())) {\n      return Promise.resolve(this.getResultsAndState())\n    }\n    this.query = query\n    this.loading = true\n    this.emitter.trigger()\n    const queryObject = this.queryProcessor(this.query.getJSON())\n    this.currentSearchRequest && this.currentSearchRequest.deactivate()\n    this.currentSearchRequest = new SearchRequest(this.transport, queryObject, this)\n    return this.currentSearchRequest.run().then(() => this.getResultsAndState())\n  }\n\n  setResults(results) {\n    this.compareResults(this.results, results)\n    this.results = results\n    this.error = null\n    this.accessors.setResults(results)\n    this.onResponseChange()\n    this.resultsEmitter.trigger(this.results)\n  }\n\n  compareResults(previousResults, results) {\n    const ids = map(get(results, ['hits', 'hits'], []), '_id').join(',')\n    const previousIds = get(previousResults, ['hits', 'ids'], '')\n    if (results.hits) {\n      results.hits.ids = ids\n      results.hits.hasChanged = !(ids && ids === previousIds)\n    }\n  }\n\n  guid(prefix) {\n    return this.guidGenerator.guid(prefix)\n  }\n\n  getHits() {\n    return get(this.results, ['hits', 'hits'], [])\n  }\n\n  getHitsCount() {\n    const hitsCount = get(this.results, ['hits', 'total'], 0)\n    if (typeof hitsCount === 'object') {\n      return hitsCount.value\n    }\n    return hitsCount\n  }\n\n  getTime() {\n    return get(this.results, 'took', 0)\n  }\n\n  getSuggestions() {\n    return get(this.results, ['suggest', 'suggestions'], {})\n  }\n\n  getQueryAccessor(): BaseQueryAccessor {\n    return this.accessors.queryAccessor\n  }\n\n  getAccessorsByType(type) {\n    return this.accessors.getAccessorsByType(type)\n  }\n\n  getAccessorByType(type) {\n    return this.accessors.getAccessorByType(type)\n  }\n\n  hasHits() {\n    return this.getHitsCount() > 0\n  }\n\n  hasHitsChanged() {\n    return get(this.results, ['hits', 'hasChanged'], true)\n  }\n\n  setError(error) {\n    this.error = error\n    console.error(this.error)\n    this.results = null\n    this.accessors.setResults(null)\n    this.onResponseChange()\n  }\n\n  onResponseChange() {\n    this.loading = false\n    this.initialLoading = false\n    this.emitter.trigger()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}