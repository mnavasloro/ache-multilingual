{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar state_1 = require(\"../state\");\n\nvar query_1 = require(\"../query\");\n\nvar FilterBasedAccessor_1 = require(\"./FilterBasedAccessor\");\n\nvar assign = require('lodash/assign');\n\nvar CheckboxFilterAccessor =\n/** @class */\nfunction (_super) {\n  __extends(CheckboxFilterAccessor, _super);\n\n  function CheckboxFilterAccessor(key, options) {\n    var _this = _super.call(this, key, options.id) || this;\n\n    _this.state = new state_1.State(false);\n    _this.options = options;\n    _this.filter = options.filter;\n    _this.state = _this.state.create(options.defaultValue);\n    _this.translations = assign({}, options.translations);\n    return _this;\n  }\n\n  CheckboxFilterAccessor.prototype.getDocCount = function () {\n    return this.getAggregations([this.uuid, 'doc_count'], 0);\n  };\n\n  CheckboxFilterAccessor.prototype.buildSharedQuery = function (query) {\n    var _this = this;\n\n    if (this.state.getValue()) {\n      query = query.addFilter(this.uuid, this.filter).addSelectedFilter({\n        name: this.options.title || this.translate(this.key),\n        value: this.options.label || this.translate('checkbox.on'),\n        id: this.options.id,\n        remove: function remove() {\n          return _this.state = _this.state.setValue(false);\n        }\n      });\n    }\n\n    return query;\n  };\n\n  CheckboxFilterAccessor.prototype.buildOwnQuery = function (query) {\n    var filters = query.getFilters();\n\n    if (!this.state.getValue()) {\n      if (filters) filters = query_1.BoolMust([filters, this.filter]);else filters = this.filter;\n    }\n\n    return query.setAggs(query_1.FilterBucket(this.uuid, filters));\n  };\n\n  CheckboxFilterAccessor.translations = {\n    'checkbox.on': 'active'\n  };\n  return CheckboxFilterAccessor;\n}(FilterBasedAccessor_1.FilterBasedAccessor);\n\nexports.CheckboxFilterAccessor = CheckboxFilterAccessor;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,eAAD,CAAtB;;AAWA;AAAA;AAAA;EAA4CC;;EAU1C,gCAAYC,GAAZ,EAAiBC,OAAjB,EAAuD;IAAvD,YACEC,kBAAMF,GAAN,EAAWC,OAAO,CAACE,EAAnB,KAAsB,IADxB;;IATAC,cAAQ,IAAIC,aAAJ,CAAmB,KAAnB,CAAR;IAWED,KAAI,CAACH,OAAL,GAAeA,OAAf;IACAG,KAAI,CAACE,MAAL,GAAcL,OAAO,CAACK,MAAtB;IACAF,KAAI,CAACG,KAAL,GAAaH,KAAI,CAACG,KAAL,CAAWC,MAAX,CAAkBP,OAAO,CAACQ,YAA1B,CAAb;IACAL,KAAI,CAACM,YAAL,GAAoBb,MAAM,CAAC,EAAD,EAAKI,OAAO,CAACS,YAAb,CAA1B;;EACD;;EAEDC;IACE,OAAO,KAAKC,eAAL,CAAqB,CAAC,KAAKC,IAAN,EAAY,WAAZ,CAArB,EAA+C,CAA/C,CAAP;EACD,CAFD;;EAIAF,8DAAiBG,KAAjB,EAAsB;IAAtB;;IACE,IAAI,KAAKP,KAAL,CAAWQ,QAAX,EAAJ,EAA2B;MACzBD,KAAK,GAAGA,KAAK,CAACE,SAAN,CAAgB,KAAKH,IAArB,EAA2B,KAAKP,MAAhC,EAAwCW,iBAAxC,CAA0D;QAChEC,IAAI,EAAE,KAAKjB,OAAL,CAAakB,KAAb,IAAsB,KAAKC,SAAL,CAAe,KAAKpB,GAApB,CADoC;QAEhEqB,KAAK,EAAE,KAAKpB,OAAL,CAAaqB,KAAb,IAAsB,KAAKF,SAAL,CAAe,aAAf,CAFmC;QAGhEjB,EAAE,EAAE,KAAKF,OAAL,CAAaE,EAH+C;QAIhEoB,MAAM,EAAE;UAAM,OAACnB,KAAI,CAACG,KAAL,GAAaH,KAAI,CAACG,KAAL,CAAWiB,QAAX,CAAoB,KAApB,CAAd;QAAyC;MAJS,CAA1D,CAAR;IAMD;;IAED,OAAOV,KAAP;EACD,CAXD;;EAaAH,2DAAcG,KAAd,EAAmB;IACjB,IAAIW,OAAO,GAAGX,KAAK,CAACY,UAAN,EAAd;;IACA,IAAI,CAAC,KAAKnB,KAAL,CAAWQ,QAAX,EAAL,EAA4B;MAC1B,IAAIU,OAAJ,EAAaA,OAAO,GAAGE,iBAAS,CAACF,OAAD,EAAU,KAAKnB,MAAf,CAAT,CAAV,CAAb,KACKmB,OAAO,GAAG,KAAKnB,MAAf;IACN;;IACD,OAAOQ,KAAK,CAACc,OAAN,CAAcD,qBAAa,KAAKd,IAAlB,EAAwBY,OAAxB,CAAd,CAAP;EACD,CAPD;;EA7BOd,sCAAoB;IACzB,eAAe;EADU,CAApB;EAqCT;AAAC,CA3CD,CAA4CkB,yCAA5C;;AAAaC","names":["assign","require","__extends","key","options","_super","id","_this","state_1","filter","state","create","defaultValue","translations","CheckboxFilterAccessor","getAggregations","uuid","query","getValue","addFilter","addSelectedFilter","name","title","translate","value","label","remove","setValue","filters","getFilters","query_1","setAggs","FilterBasedAccessor_1","exports"],"sources":["C:\\Users\\mnavas\\CODE\\SmartBIC\\ache-multilingual\\ache-dashboard\\node_modules\\searchkit\\src\\core\\accessors\\CheckboxFilterAccessor.ts"],"sourcesContent":["import { State } from '../state'\nimport { BoolMust, FilterBucket } from '../query'\nimport { FilterBasedAccessor } from './FilterBasedAccessor'\n\nconst assign = require('lodash/assign')\n\nexport interface CheckboxFilterAccessorOptions {\n  id: string\n  filter: any\n  title?: string\n  label?: string\n  translations?: Record<string, any>\n  defaultValue?: boolean\n}\n\nexport class CheckboxFilterAccessor extends FilterBasedAccessor<State<boolean>> {\n  state = new State<boolean>(false)\n  options: any\n  uuid: string\n  filter: any\n\n  static translations: any = {\n    'checkbox.on': 'active'\n  }\n\n  constructor(key, options: CheckboxFilterAccessorOptions) {\n    super(key, options.id)\n    this.options = options\n    this.filter = options.filter\n    this.state = this.state.create(options.defaultValue)\n    this.translations = assign({}, options.translations)\n  }\n\n  getDocCount() {\n    return this.getAggregations([this.uuid, 'doc_count'], 0)\n  }\n\n  buildSharedQuery(query) {\n    if (this.state.getValue()) {\n      query = query.addFilter(this.uuid, this.filter).addSelectedFilter({\n        name: this.options.title || this.translate(this.key),\n        value: this.options.label || this.translate('checkbox.on'),\n        id: this.options.id,\n        remove: () => (this.state = this.state.setValue(false))\n      })\n    }\n\n    return query\n  }\n\n  buildOwnQuery(query) {\n    let filters = query.getFilters()\n    if (!this.state.getValue()) {\n      if (filters) filters = BoolMust([filters, this.filter])\n      else filters = this.filter\n    }\n    return query.setAggs(FilterBucket(this.uuid, filters))\n  }\n}\n"]},"metadata":{},"sourceType":"script"}