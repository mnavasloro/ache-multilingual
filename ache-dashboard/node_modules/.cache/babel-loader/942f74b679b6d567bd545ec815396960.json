{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isArray = require('lodash/isArray');\n\nvar findIndex = require('lodash/findIndex');\n\nvar forEach = require('lodash/forEach');\n\nvar isEmpty = require('lodash/isEmpty');\n\nvar filter = require('lodash/filter');\n\nvar keys = require('lodash/keys');\n\nfunction isBoolOp(operator, val) {\n  // Has {bool: must: []} ?\n  if (!val.bool || !val.bool[operator]) return false; // Doesn't have other stuff ?\n\n  return keys(val).length == 1 && keys(val.bool).length == 1;\n}\n\nfunction flattenBool(operator, arr) {\n  // Flatten bool.must\n  var newArr = [];\n  forEach(arr, function (node) {\n    if (isBoolOp(operator, node)) {\n      newArr = newArr.concat(node.bool[operator]);\n    } else {\n      newArr.push(node);\n    }\n  });\n  return newArr;\n}\n\nfunction boolHelper(val, operator) {\n  var _a;\n\n  var isArr = isArray(val);\n\n  if (isArr) {\n    // Remove empty filters\n    val = filter(val, function (f) {\n      return !isEmpty(f);\n    });\n\n    if (val.length === 1) {\n      if (operator != 'must_not') return val[0];\n      val = val[0]; // Unbox array\n    } else if (val.length === 0) {\n      return {};\n    } else if ((operator == 'must' || operator == 'should') && findIndex(val, isBoolOp.bind(null, operator)) != -1) {\n      val = flattenBool(operator, val);\n    }\n  }\n\n  return {\n    bool: (_a = {}, _a[operator] = val, _a)\n  };\n}\n\nfunction BoolMust(val) {\n  return boolHelper(val, 'must');\n}\n\nexports.BoolMust = BoolMust;\n\nfunction BoolMustNot(val) {\n  return boolHelper(val, 'must_not');\n}\n\nexports.BoolMustNot = BoolMustNot;\n\nfunction BoolShould(val) {\n  return boolHelper(val, 'should');\n}\n\nexports.BoolShould = BoolShould;","map":{"version":3,"mappings":";;;;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAAvB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,gBAAD,CAAvB;;AACA,IAAMG,OAAO,GAAGH,OAAO,CAAC,gBAAD,CAAvB;;AACA,IAAMI,MAAM,GAAGJ,OAAO,CAAC,eAAD,CAAtB;;AACA,IAAMK,IAAI,GAAGL,OAAO,CAAC,aAAD,CAApB;;AAEA,SAASM,QAAT,CAAkBC,QAAlB,EAA4BC,GAA5B,EAA+B;EAC7B;EACA,IAAI,CAACA,GAAG,CAACC,IAAL,IAAa,CAACD,GAAG,CAACC,IAAJ,CAASF,QAAT,CAAlB,EAAsC,OAAO,KAAP,CAFT,CAI7B;;EACA,OAAOF,IAAI,CAACG,GAAD,CAAJ,CAAUE,MAAV,IAAoB,CAApB,IAAyBL,IAAI,CAACG,GAAG,CAACC,IAAL,CAAJ,CAAeC,MAAf,IAAyB,CAAzD;AACD;;AAED,SAASC,WAAT,CAAqBJ,QAArB,EAA+BK,GAA/B,EAA8C;EAC5C;EACA,IAAIC,MAAM,GAAG,EAAb;EACAX,OAAO,CAACU,GAAD,EAAM,UAACE,IAAD,EAAK;IAChB,IAAIR,QAAQ,CAACC,QAAD,EAAWO,IAAX,CAAZ,EAA8B;MAC5BD,MAAM,GAAGA,MAAM,CAACE,MAAP,CAAcD,IAAI,CAACL,IAAL,CAAUF,QAAV,CAAd,CAAT;IACD,CAFD,MAEO;MACLM,MAAM,CAACG,IAAP,CAAYF,IAAZ;IACD;EACF,CANM,CAAP;EAOA,OAAOD,MAAP;AACD;;AAED,SAASI,UAAT,CAAoBT,GAApB,EAAyBD,QAAzB,EAAiC;;;EAC/B,IAAMW,KAAK,GAAGnB,OAAO,CAACS,GAAD,CAArB;;EACA,IAAIU,KAAJ,EAAW;IACT;IACAV,GAAG,GAAGJ,MAAM,CAACI,GAAD,EAAM,UAACW,CAAD,EAAE;MAAK,QAAChB,OAAO,CAACgB,CAAD,CAAR;IAAW,CAAxB,CAAZ;;IACA,IAAIX,GAAG,CAACE,MAAJ,KAAe,CAAnB,EAAsB;MACpB,IAAIH,QAAQ,IAAI,UAAhB,EAA4B,OAAOC,GAAG,CAAC,CAAD,CAAV;MAC5BA,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAT,CAFoB,CAEP;IACd,CAHD,MAGO,IAAIA,GAAG,CAACE,MAAJ,KAAe,CAAnB,EAAsB;MAC3B,OAAO,EAAP;IACD,CAFM,MAEA,IACL,CAACH,QAAQ,IAAI,MAAZ,IAAsBA,QAAQ,IAAI,QAAnC,KACAN,SAAS,CAACO,GAAD,EAAMF,QAAQ,CAACc,IAAT,CAAc,IAAd,EAAoBb,QAApB,CAAN,CAAT,IAAiD,CAAC,CAF7C,EAGL;MACAC,GAAG,GAAGG,WAAW,CAACJ,QAAD,EAAWC,GAAX,CAAjB;IACD;EACF;;EACD,OAAO;IACLC,IAAI,YACFY,GAACd,QAAD,IAAYC,GADV;EADC,CAAP;AAKD;;AAED,SAAgBc,QAAhB,CAAyBd,GAAzB,EAAiC;EAC/B,OAAOS,UAAU,CAACT,GAAD,EAAM,MAAN,CAAjB;AACD;;AAFDe;;AAIA,SAAgBC,WAAhB,CAA4BhB,GAA5B,EAAoC;EAClC,OAAOS,UAAU,CAACT,GAAD,EAAM,UAAN,CAAjB;AACD;;AAFDe;;AAIA,SAAgBE,UAAhB,CAA2BjB,GAA3B,EAAmC;EACjC,OAAOS,UAAU,CAACT,GAAD,EAAM,QAAN,CAAjB;AACD;;AAFDe","names":["isArray","require","findIndex","forEach","isEmpty","filter","keys","isBoolOp","operator","val","bool","length","flattenBool","arr","newArr","node","concat","push","boolHelper","isArr","f","bind","_a","BoolMust","exports","BoolMustNot","BoolShould"],"sources":["C:\\Users\\mnavas\\CODE\\SmartBIC\\ache-multilingual\\ache-dashboard\\node_modules\\searchkit\\src\\core\\query\\query_dsl\\compound\\BoolQueries.ts"],"sourcesContent":["const isArray = require('lodash/isArray')\nconst findIndex = require('lodash/findIndex')\nconst forEach = require('lodash/forEach')\nconst isEmpty = require('lodash/isEmpty')\nconst filter = require('lodash/filter')\nconst keys = require('lodash/keys')\n\nfunction isBoolOp(operator, val) {\n  // Has {bool: must: []} ?\n  if (!val.bool || !val.bool[operator]) return false\n\n  // Doesn't have other stuff ?\n  return keys(val).length == 1 && keys(val.bool).length == 1\n}\n\nfunction flattenBool(operator, arr: Array<any>) {\n  // Flatten bool.must\n  let newArr = []\n  forEach(arr, (node) => {\n    if (isBoolOp(operator, node)) {\n      newArr = newArr.concat(node.bool[operator])\n    } else {\n      newArr.push(node)\n    }\n  })\n  return newArr\n}\n\nfunction boolHelper(val, operator) {\n  const isArr = isArray(val)\n  if (isArr) {\n    // Remove empty filters\n    val = filter(val, (f) => !isEmpty(f))\n    if (val.length === 1) {\n      if (operator != 'must_not') return val[0]\n      val = val[0] // Unbox array\n    } else if (val.length === 0) {\n      return {}\n    } else if (\n      (operator == 'must' || operator == 'should') &&\n      findIndex(val, isBoolOp.bind(null, operator)) != -1\n    ) {\n      val = flattenBool(operator, val)\n    }\n  }\n  return {\n    bool: {\n      [operator]: val\n    }\n  }\n}\n\nexport function BoolMust(val: any) {\n  return boolHelper(val, 'must')\n}\n\nexport function BoolMustNot(val: any) {\n  return boolHelper(val, 'must_not')\n}\n\nexport function BoolShould(val: any) {\n  return boolHelper(val, 'should')\n}\n"]},"metadata":{},"sourceType":"script"}