{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar query_dsl_1 = require(\"../query_dsl\");\n\nvar FieldContext_1 = require(\"./FieldContext\");\n\nvar get = require('lodash/get');\n\nvar NestedFieldContext =\n/** @class */\nfunction (_super) {\n  __extends(NestedFieldContext, _super);\n\n  function NestedFieldContext(fieldOptions) {\n    var _this = _super.call(this, fieldOptions) || this;\n\n    if (!get(_this.fieldOptions, 'options.path')) {\n      throw new Error('fieldOptions type:nested requires options.path');\n    }\n\n    return _this;\n  }\n\n  NestedFieldContext.prototype.getAggregationPath = function () {\n    return 'inner';\n  };\n\n  NestedFieldContext.prototype.wrapAggregations = function () {\n    var aggregations = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      aggregations[_i] = arguments[_i];\n    }\n\n    return [query_dsl_1.NestedBucket.apply(void 0, __spreadArrays(['inner', this.fieldOptions.options.path], aggregations))];\n  };\n\n  NestedFieldContext.prototype.wrapFilter = function (filter) {\n    return query_dsl_1.NestedQuery(this.fieldOptions.options.path, filter, this.fieldOptions.options);\n  };\n\n  return NestedFieldContext;\n}(FieldContext_1.FieldContext);\n\nexports.NestedFieldContext = NestedFieldContext;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AAEA;AAAA;AAAA;EAAwCC;;EACtC,4BAAYC,YAAZ,EAAwB;IAAxB,YACEC,kBAAMD,YAAN,KAAmB,IADrB;;IAEE,IAAI,CAACH,GAAG,CAACK,KAAI,CAACF,YAAN,EAAoB,cAApB,CAAR,EAA6C;MAC3C,MAAM,IAAIG,KAAJ,CAAU,gDAAV,CAAN;IACD;;;EACF;;EAEDC;IACE,OAAO,OAAP;EACD,CAFD;;EAIAA;IAAiB;;SAAA,yCAAe;MAAfC;;;IACf,OAAO,CAACC,yBAAYC,KAAZ,CAAY,MAAZ,EAAYC,gBAAC,OAAD,EAAU,KAAKR,YAAL,CAAkBS,OAAlB,CAA0BC,IAApC,GAA6CL,YAA7C,CAAZ,CAAD,CAAP;EACD,CAFD;;EAGAD,oDAAWO,MAAX,EAAiB;IACf,OAAOL,wBAAY,KAAKN,YAAL,CAAkBS,OAAlB,CAA0BC,IAAtC,EAA4CC,MAA5C,EAAoD,KAAKX,YAAL,CAAkBS,OAAtE,CAAP;EACD,CAFD;;EAGF;AAAC,CAlBD,CAAwCG,2BAAxC;;AAAaC","names":["get","require","__extends","fieldOptions","_super","_this","Error","NestedFieldContext","aggregations","query_dsl_1","apply","__spreadArrays","options","path","filter","FieldContext_1","exports"],"sources":["C:\\Users\\mnavas\\CODE\\SmartBIC\\ache-multilingual\\ache-dashboard\\node_modules\\searchkit\\src\\core\\query\\field_context\\NestedFieldContext.ts"],"sourcesContent":["import { NestedBucket, NestedQuery } from '../query_dsl'\nimport { FieldContext } from './FieldContext'\nconst get = require('lodash/get')\n\nexport class NestedFieldContext extends FieldContext {\n  constructor(fieldOptions) {\n    super(fieldOptions)\n    if (!get(this.fieldOptions, 'options.path')) {\n      throw new Error('fieldOptions type:nested requires options.path')\n    }\n  }\n\n  getAggregationPath() {\n    return 'inner'\n  }\n\n  wrapAggregations(...aggregations) {\n    return [NestedBucket('inner', this.fieldOptions.options.path, ...aggregations)]\n  }\n  wrapFilter(filter) {\n    return NestedQuery(this.fieldOptions.options.path, filter, this.fieldOptions.options)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}