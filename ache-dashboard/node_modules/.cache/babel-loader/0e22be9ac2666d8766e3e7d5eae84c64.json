{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Utils_1 = require(\"../support/Utils\");\n\nvar query_dsl_1 = require(\"./query_dsl\");\n\nvar update = require('immutability-helper');\n\nvar omitBy = require('lodash/omitBy');\n\nvar omit = require('lodash/omit');\n\nvar values = require('lodash/values');\n\nvar pick = require('lodash/pick');\n\nvar merge = require('lodash/merge');\n\nvar isUndefined = require('lodash/isUndefined');\n\nvar ImmutableQuery =\n/** @class */\nfunction () {\n  function ImmutableQuery(index) {\n    if (index === void 0) {\n      index = ImmutableQuery.defaultIndex;\n    }\n\n    this.index = index;\n    this.buildQuery();\n  }\n\n  ImmutableQuery.prototype.buildQuery = function () {\n    var query = {};\n\n    if (this.index.queries.length > 0) {\n      query.query = query_dsl_1.BoolMust(this.index.queries);\n    }\n\n    if (this.index.filters.length > 0) {\n      query.post_filter = query_dsl_1.BoolMust(this.index.filters);\n    }\n\n    query.aggs = this.index.aggs;\n    query.size = this.index.size;\n    query.from = this.index.from;\n    query.sort = this.index.sort;\n    query.highlight = this.index.highlight;\n    query.suggest = this.index.suggest;\n\n    if (this.index._source) {\n      query._source = this.index._source;\n    }\n\n    this.query = omitBy(query, isUndefined);\n  };\n\n  ImmutableQuery.prototype.hasFilters = function () {\n    return this.index.filters.length > 0;\n  };\n\n  ImmutableQuery.prototype.hasFiltersOrQuery = function () {\n    return this.index.queries.length + this.index.filters.length > 0 || !!this.index.sort;\n  };\n\n  ImmutableQuery.prototype.addQuery = function (query) {\n    if (!query) {\n      return this;\n    }\n\n    return this.update({\n      queries: {\n        $push: [query]\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.setQueryString = function (queryString) {\n    return this.update({\n      $merge: {\n        queryString: queryString\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.getQueryString = function () {\n    return this.index.queryString;\n  };\n\n  ImmutableQuery.prototype.addSelectedFilter = function (selectedFilter) {\n    return this.addSelectedFilters([selectedFilter]);\n  };\n\n  ImmutableQuery.prototype.addSelectedFilters = function (selectedFilters) {\n    return this.update({\n      selectedFilters: {\n        $push: selectedFilters\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.getSelectedFilters = function () {\n    return this.index.selectedFilters;\n  };\n\n  ImmutableQuery.prototype.addAnonymousFilter = function (bool) {\n    return this.addFilter(Utils_1.Utils.guid(), bool);\n  };\n\n  ImmutableQuery.prototype.addFilter = function (key, filter) {\n    var _a;\n\n    return this.update({\n      filters: {\n        $push: [filter]\n      },\n      filtersMap: {\n        $merge: (_a = {}, _a[key] = filter, _a)\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.setAggs = function (aggs) {\n    return this.deepUpdate('aggs', aggs);\n  };\n\n  ImmutableQuery.prototype.getFilters = function (keys) {\n    if (keys === void 0) {\n      keys = [];\n    }\n\n    return this.getFiltersWithoutKeys(keys);\n  };\n\n  ImmutableQuery.prototype._getFilters = function (keys, method) {\n    keys = [].concat(keys);\n    var filters = values(method(this.index.filtersMap || {}, keys));\n    return query_dsl_1.BoolMust(filters);\n  };\n\n  ImmutableQuery.prototype.getFiltersWithKeys = function (keys) {\n    return this._getFilters(keys, pick);\n  };\n\n  ImmutableQuery.prototype.getFiltersWithoutKeys = function (keys) {\n    return this._getFilters(keys, omit);\n  };\n\n  ImmutableQuery.prototype.setSize = function (size) {\n    return this.update({\n      $merge: {\n        size: size\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.setSort = function (sort) {\n    return this.update({\n      $merge: {\n        sort: sort\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.setSource = function (_source) {\n    return this.update({\n      $merge: {\n        _source: _source\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.setHighlight = function (highlight) {\n    return this.deepUpdate('highlight', highlight);\n  };\n\n  ImmutableQuery.prototype.getSize = function () {\n    return this.query.size;\n  };\n\n  ImmutableQuery.prototype.setFrom = function (from) {\n    return this.update({\n      $merge: {\n        from: from\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.getFrom = function () {\n    return this.query.from;\n  };\n\n  ImmutableQuery.prototype.getPage = function () {\n    return 1 + Math.floor((this.getFrom() || 0) / (this.getSize() || 10));\n  };\n\n  ImmutableQuery.prototype.deepUpdate = function (key, ob) {\n    var _a;\n\n    return this.update({\n      $merge: (_a = {}, _a[key] = merge({}, this.index[key] || {}, ob), _a)\n    });\n  };\n\n  ImmutableQuery.prototype.setSuggestions = function (suggestions) {\n    return this.update({\n      $merge: {\n        suggest: suggestions\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.update = function (updateDef) {\n    return new ImmutableQuery(update(this.index, updateDef));\n  };\n\n  ImmutableQuery.prototype.getJSON = function () {\n    return this.query;\n  };\n\n  ImmutableQuery.prototype.printJSON = function () {\n    console.log(JSON.stringify(this.getJSON(), null, 2));\n  };\n\n  ImmutableQuery.defaultIndex = {\n    queryString: '',\n    filtersMap: {},\n    selectedFilters: [],\n    queries: [],\n    filters: [],\n    _source: null,\n    size: 0\n  };\n  return ImmutableQuery;\n}();\n\nexports.ImmutableQuery = ImmutableQuery;","map":{"version":3,"mappings":"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","names":["update","require","omitBy","omit","values","pick","merge","isUndefined","index","ImmutableQuery","defaultIndex","buildQuery","query","queries","length","query_dsl_1","filters","post_filter","aggs","size","from","sort","highlight","suggest","_source","$push","queryString","$merge","selectedFilter","addSelectedFilters","selectedFilters","bool","addFilter","Utils_1","guid","key","filter","filtersMap","_a","deepUpdate","keys","getFiltersWithoutKeys","method","concat","_getFilters","Math","floor","getFrom","getSize","ob","suggestions","updateDef","console","log","JSON","stringify","getJSON","exports"],"sources":["C:\\Users\\mnavas\\CODE\\SmartBIC\\ache-multilingual\\ache-dashboard\\node_modules\\searchkit\\src\\core\\query\\ImmutableQuery.ts"],"sourcesContent":["import { Utils } from '../support/Utils'\nimport { BoolMust } from './query_dsl'\nimport { SelectedFilter } from './SelectedFilter'\nconst update = require('immutability-helper')\nconst omitBy = require('lodash/omitBy')\nconst omit = require('lodash/omit')\nconst values = require('lodash/values')\nconst pick = require('lodash/pick')\nconst merge = require('lodash/merge')\nconst isUndefined = require('lodash/isUndefined')\n\nexport type SourceFilterType = string | Array<string> | boolean\n\nexport class ImmutableQuery {\n  index: any\n  query: any\n  static defaultIndex: any = {\n    queryString: '',\n    filtersMap: {},\n    selectedFilters: [],\n    queries: [],\n    filters: [],\n    _source: null,\n    size: 0\n  }\n  constructor(index = ImmutableQuery.defaultIndex) {\n    this.index = index\n    this.buildQuery()\n  }\n\n  buildQuery() {\n    const query: any = {}\n    if (this.index.queries.length > 0) {\n      query.query = BoolMust(this.index.queries)\n    }\n    if (this.index.filters.length > 0) {\n      query.post_filter = BoolMust(this.index.filters)\n    }\n    query.aggs = this.index.aggs\n    query.size = this.index.size\n    query.from = this.index.from\n    query.sort = this.index.sort\n    query.highlight = this.index.highlight\n    query.suggest = this.index.suggest\n    if (this.index._source) {\n      query._source = this.index._source\n    }\n    this.query = omitBy(query, isUndefined)\n  }\n\n  hasFilters() {\n    return this.index.filters.length > 0\n  }\n\n  hasFiltersOrQuery() {\n    return this.index.queries.length + this.index.filters.length > 0 || !!this.index.sort\n  }\n\n  addQuery(query: any) {\n    if (!query) {\n      return this\n    }\n    return this.update({\n      queries: { $push: [query] }\n    })\n  }\n\n  setQueryString(queryString) {\n    return this.update({ $merge: { queryString } })\n  }\n\n  getQueryString() {\n    return this.index.queryString\n  }\n\n  addSelectedFilter(selectedFilter: SelectedFilter) {\n    return this.addSelectedFilters([selectedFilter])\n  }\n  addSelectedFilters(selectedFilters: Array<SelectedFilter>) {\n    return this.update({\n      selectedFilters: { $push: selectedFilters }\n    })\n  }\n\n  getSelectedFilters(): Array<SelectedFilter> {\n    return this.index.selectedFilters\n  }\n  addAnonymousFilter(bool) {\n    return this.addFilter(Utils.guid(), bool)\n  }\n\n  addFilter(key, filter) {\n    return this.update({\n      filters: { $push: [filter] },\n      filtersMap: { $merge: { [key]: filter } }\n    })\n  }\n\n  setAggs(aggs) {\n    return this.deepUpdate('aggs', aggs)\n  }\n\n  getFilters(keys = []) {\n    return this.getFiltersWithoutKeys(keys)\n  }\n\n  _getFilters(keys, method) {\n    keys = [].concat(keys)\n    const filters = values(method(this.index.filtersMap || {}, keys))\n    return BoolMust(filters)\n  }\n  getFiltersWithKeys(keys) {\n    return this._getFilters(keys, pick)\n  }\n  getFiltersWithoutKeys(keys) {\n    return this._getFilters(keys, omit)\n  }\n\n  setSize(size: number) {\n    return this.update({ $merge: { size } })\n  }\n\n  setSort(sort: any) {\n    return this.update({ $merge: { sort: sort } })\n  }\n\n  setSource(_source: SourceFilterType) {\n    return this.update({ $merge: { _source } })\n  }\n\n  setHighlight(highlight: any) {\n    return this.deepUpdate('highlight', highlight)\n  }\n\n  getSize() {\n    return this.query.size\n  }\n\n  setFrom(from: number) {\n    return this.update({ $merge: { from } })\n  }\n\n  getFrom() {\n    return this.query.from\n  }\n\n  getPage() {\n    return 1 + Math.floor((this.getFrom() || 0) / (this.getSize() || 10))\n  }\n\n  deepUpdate(key, ob) {\n    return this.update({\n      $merge: {\n        [key]: merge({}, this.index[key] || {}, ob)\n      }\n    })\n  }\n\n  setSuggestions(suggestions) {\n    return this.update({\n      $merge: { suggest: suggestions }\n    })\n  }\n\n  update(updateDef) {\n    return new ImmutableQuery(update(this.index, updateDef))\n  }\n\n  getJSON() {\n    return this.query\n  }\n\n  printJSON() {\n    console.log(JSON.stringify(this.getJSON(), null, 2))\n  }\n}\n"]},"metadata":{},"sourceType":"script"}