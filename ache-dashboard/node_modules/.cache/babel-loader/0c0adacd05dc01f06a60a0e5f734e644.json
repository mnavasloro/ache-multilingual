{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar state_1 = require(\"../state\");\n\nvar support_1 = require(\"../support\");\n\nvar StatefulAccessor_1 = require(\"./StatefulAccessor\");\n\nvar find = require('lodash/find');\n\nvar head = require('lodash/head');\n\nvar map = require('lodash/map');\n\nvar SortingAccessor =\n/** @class */\nfunction (_super) {\n  __extends(SortingAccessor, _super);\n\n  function SortingAccessor(key, options) {\n    var _this = _super.call(this, key) || this;\n\n    _this.state = new state_1.ValueState();\n    _this.options = options;\n    _this.options.options = support_1.Utils.computeOptionKeys(_this.options.options, ['field', 'order'], 'none');\n    return _this;\n  }\n\n  SortingAccessor.prototype.getSelectedOption = function () {\n    var options = this.options.options;\n    return find(options, {\n      key: \"\" + this.state.getValue()\n    }) || find(options, {\n      defaultOption: true\n    }) || head(options);\n  };\n\n  SortingAccessor.prototype.getSortQuery = function (sortOption) {\n    var _a;\n\n    if (sortOption.fields) {\n      return map(sortOption.fields, function (field) {\n        var _a;\n\n        return _a = {}, _a[field.field] = field.options || {}, _a;\n      });\n    } else if (sortOption.field && sortOption.order) {\n      return [(_a = {}, _a[sortOption.field] = sortOption.order, _a)];\n    } else if (sortOption.field) {\n      return [sortOption.field];\n    }\n\n    return null;\n  };\n\n  SortingAccessor.prototype.buildOwnQuery = function (query) {\n    var selectedSortOption = this.getSelectedOption();\n\n    if (selectedSortOption) {\n      var sortQuery = this.getSortQuery(selectedSortOption);\n\n      if (sortQuery) {\n        query = query.setSort(sortQuery);\n      }\n    }\n\n    return query;\n  };\n\n  return SortingAccessor;\n}(StatefulAccessor_1.StatefulAccessor);\n\nexports.SortingAccessor = SortingAccessor;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA,IAAMA,IAAI,GAAGC,OAAO,CAAC,aAAD,CAApB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,aAAD,CAApB;;AACA,IAAME,GAAG,GAAGF,OAAO,CAAC,YAAD,CAAnB;;AAoBA;AAAA;AAAA;EAAqCG;;EAInC,yBAAYC,GAAZ,EAAiBC,OAAjB,EAAwC;IAAxC,YACEC,kBAAMF,GAAN,KAAU,IADZ;;IAHAG,cAAQ,IAAIC,kBAAJ,EAAR;IAKED,KAAI,CAACF,OAAL,GAAeA,OAAf;IACAE,KAAI,CAACF,OAAL,CAAaA,OAAb,GAAuBI,gBAAMC,iBAAN,CAAwBH,KAAI,CAACF,OAAL,CAAaA,OAArC,EAA8C,CAAC,OAAD,EAAU,OAAV,CAA9C,EAAkE,MAAlE,CAAvB;;EACD;;EAEDM;IACE,IAAMN,OAAO,GAAG,KAAKA,OAAL,CAAaA,OAA7B;IACA,OACEN,IAAI,CAACM,OAAD,EAAU;MAAED,GAAG,EAAE,KAAG,KAAKQ,KAAL,CAAWC,QAAX;IAAV,CAAV,CAAJ,IACAd,IAAI,CAACM,OAAD,EAAU;MAAES,aAAa,EAAE;IAAjB,CAAV,CADJ,IAEAb,IAAI,CAACI,OAAD,CAHN;EAKD,CAPD;;EASAM,mDAAaI,UAAb,EAAuB;;;IACrB,IAAIA,UAAU,CAACC,MAAf,EAAuB;MACrB,OAAOd,GAAG,CAACa,UAAU,CAACC,MAAZ,EAAoB,UAACC,KAAD,EAAoB;;;QAAK,gBACrDC,GAACD,KAAK,CAACA,KAAP,IAAeA,KAAK,CAACZ,OAAN,IAAiB,EADqB;MAErD,CAFQ,CAAV;IAGD,CAJD,MAIO,IAAIU,UAAU,CAACE,KAAX,IAAoBF,UAAU,CAACI,KAAnC,EAA0C;MAC/C,OAAO,WAAGD,GAACH,UAAU,CAACE,KAAZ,IAAoBF,UAAU,CAACI,KAAlC,EAAuCD,EAAvC,EAAP;IACD,CAFM,MAEA,IAAIH,UAAU,CAACE,KAAf,EAAsB;MAC3B,OAAO,CAACF,UAAU,CAACE,KAAZ,CAAP;IACD;;IACD,OAAO,IAAP;EACD,CAXD;;EAaAN,oDAAcS,KAAd,EAAmB;IACjB,IAAMC,kBAAkB,GAAG,KAAKC,iBAAL,EAA3B;;IACA,IAAID,kBAAJ,EAAwB;MACtB,IAAME,SAAS,GAAG,KAAKC,YAAL,CAAkBH,kBAAlB,CAAlB;;MACA,IAAIE,SAAJ,EAAe;QACbH,KAAK,GAAGA,KAAK,CAACK,OAAN,CAAcF,SAAd,CAAR;MACD;IACF;;IACD,OAAOH,KAAP;EACD,CATD;;EAUF;AAAC,CA1CD,CAAqCM,mCAArC;;AAAaC","names":["find","require","head","map","__extends","key","options","_super","_this","state_1","support_1","computeOptionKeys","SortingAccessor","state","getValue","defaultOption","sortOption","fields","field","_a","order","query","selectedSortOption","getSelectedOption","sortQuery","getSortQuery","setSort","StatefulAccessor_1","exports"],"sources":["C:\\Users\\mnavas\\CODE\\SmartBIC\\ache-multilingual\\ache-dashboard\\node_modules\\searchkit\\src\\core\\accessors\\SortingAccessor.ts"],"sourcesContent":["import { ValueState } from '../state'\nimport { Utils } from '../support'\nimport { StatefulAccessor } from './StatefulAccessor'\nconst find = require('lodash/find')\nconst head = require('lodash/head')\nconst map = require('lodash/map')\n\nexport interface SortingField {\n  field: string\n  options: Record<string, any>\n}\n\nexport interface SortingOption {\n  label: string\n  field?: string\n  order?: string\n  defaultOption?: boolean\n  key?: string\n  fields?: Array<SortingField>\n}\n\nexport interface SortingOptions {\n  options: Array<SortingOption>\n}\n\nexport class SortingAccessor extends StatefulAccessor<ValueState> {\n  state = new ValueState()\n  options: SortingOptions\n\n  constructor(key, options: SortingOptions) {\n    super(key)\n    this.options = options\n    this.options.options = Utils.computeOptionKeys(this.options.options, ['field', 'order'], 'none')\n  }\n\n  getSelectedOption() {\n    const options = this.options.options\n    return (\n      find(options, { key: `${this.state.getValue()}` }) ||\n      find(options, { defaultOption: true }) ||\n      head(options)\n    )\n  }\n\n  getSortQuery(sortOption) {\n    if (sortOption.fields) {\n      return map(sortOption.fields, (field: SortingField) => ({\n        [field.field]: field.options || {}\n      }))\n    } else if (sortOption.field && sortOption.order) {\n      return [{ [sortOption.field]: sortOption.order }]\n    } else if (sortOption.field) {\n      return [sortOption.field]\n    }\n    return null\n  }\n\n  buildOwnQuery(query) {\n    const selectedSortOption = this.getSelectedOption()\n    if (selectedSortOption) {\n      const sortQuery = this.getSortQuery(selectedSortOption)\n      if (sortQuery) {\n        query = query.setSort(sortQuery)\n      }\n    }\n    return query\n  }\n}\n"]},"metadata":{},"sourceType":"script"}